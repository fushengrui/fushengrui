<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shengrui&#39;s Blog</title>
  <subtitle>浮生如寄 - 但也蛮有乐趣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-21T19:45:08.428Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>傅晟瑞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>旅行随拍 - 新疆</title>
    <link href="http://yoursite.com/2017/08/21/%E6%96%B0%E7%96%86/"/>
    <id>http://yoursite.com/2017/08/21/新疆/</id>
    <published>2017-08-21T15:14:54.000Z</published>
    <updated>2017-08-21T19:45:08.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="·-旅行线路"><a href="#·-旅行线路" class="headerlink" title="·  旅行线路"></a>·  旅行线路</h2><p> Day 1 - 从兰州搭乘高铁前往乌鲁木齐<br> Day 2 - 出发前往清河县，并途径赛里木湖<br> Day 3 - 出发前往霍尔果斯经济特区<br> Day 4 - 游览那拉提草原<br> Day 5 - 15小时车程赶往吐鲁番市<br> Day 6 - 参观葡萄沟和火焰山<br> Day 7 - 返回乌鲁木齐，并途径巴音布鲁克草原</p>
<a id="more"></a>
<h2 id="·-风景篇"><a href="#·-风景篇" class="headerlink" title="· 风景篇"></a>· 风景篇</h2><h4 id="lt-巴音布鲁克草原-gt"><a href="#lt-巴音布鲁克草原-gt" class="headerlink" title="&lt; 巴音布鲁克草原 &gt;"></a>&lt; 巴音布鲁克草原 &gt;</h4><p><img src="http://i.imgur.com/XYfbkW4.jpg" alt=""></p>
<p><img src="http://i.imgur.com/eCv0XG8.jpg" alt=""></p>
<p><img src="http://i.imgur.com/isrmiY0.jpg" alt=""></p>
<h4 id="lt-那拉提草原-gt"><a href="#lt-那拉提草原-gt" class="headerlink" title="&lt; 那拉提草原 &gt;"></a>&lt; 那拉提草原 &gt;</h4><p><img src="http://i.imgur.com/bAuDNdz.jpg" alt=""> </p>
<p><img src="http://i.imgur.com/qpRHBXJ.jpg" alt=""></p>
<p><img src="http://i.imgur.com/ekhLLps.jpg" alt=""></p>
<p><img src="http://i.imgur.com/niSEG8m.jpg" alt=""></p>
<p><img src="http://i.imgur.com/ltOpeZQ.jpg" alt=""></p>
<p><img src="http://i.imgur.com/bjeCbWc.jpg" alt=""></p>
<p><img src="http://i.imgur.com/eKgz3dE.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;·-旅行线路&quot;&gt;&lt;a href=&quot;#·-旅行线路&quot; class=&quot;headerlink&quot; title=&quot;·  旅行线路&quot;&gt;&lt;/a&gt;·  旅行线路&lt;/h2&gt;&lt;p&gt; Day 1 - 从兰州搭乘高铁前往乌鲁木齐&lt;br&gt; Day 2 - 出发前往清河县，并途径赛里木湖&lt;br&gt; Day 3 - 出发前往霍尔果斯经济特区&lt;br&gt; Day 4 - 游览那拉提草原&lt;br&gt; Day 5 - 15小时车程赶往吐鲁番市&lt;br&gt; Day 6 - 参观葡萄沟和火焰山&lt;br&gt; Day 7 - 返回乌鲁木齐，并途径巴音布鲁克草原&lt;/p&gt;
    
    </summary>
    
      <category term="照片" scheme="http://yoursite.com/categories/%E7%85%A7%E7%89%87/"/>
    
    
      <category term="暑期旅行" scheme="http://yoursite.com/tags/%E6%9A%91%E6%9C%9F%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>机器学习 - Python Example</title>
    <link href="http://yoursite.com/2017/07/02/machine-learning/"/>
    <id>http://yoursite.com/2017/07/02/machine-learning/</id>
    <published>2017-07-02T05:34:22.000Z</published>
    <updated>2017-08-21T18:46:52.115Z</updated>
    
    <content type="html"><![CDATA[<h3 id="·-以下例子来源于：MIT"><a href="#·-以下例子来源于：MIT" class="headerlink" title="· 以下例子来源于：MIT"></a>· 以下例子来源于：MIT</h3><p>{<br> “cells”: [<br>  {<br>   “cell_type”: “markdown”,<br>   “metadata”: {},<br>   “source”: [<br>    “#### Examples from Chapter 15: Machine Learning”<br><a id="more"></a><br>   ]<br>  },<br>  {<br>   “cell_type”: “markdown”,<br>   “metadata”: {},<br>   “source”: [<br>    “Adapted from J. Guttag: Introduction to Computation and Programming using Python, MIT Press”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 1,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “import random\n”,<br>    “import matplotlib.pylab as pylab\n”,<br>    “\n”,<br>    “pylab.ion() # turn on interactive mode, to avoid pylab.show() at end”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 2,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def minkowskiDist(v1, v2, p):\n”,<br>    “   \”\”\”Assumes v1 and v2 are equal-length arrays of numbers\n”,<br>    “   Returns Minkowski distance of order p between v1 and v2\”\”\”\n”,<br>    “   dist = sum(abs(v1[i] - v2[i]) <strong> p for i in range(len(v1)))\n”,<br>    “    return dist </strong> (1.0 / p)”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 3,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “class Animal:\n”,<br>    “\n”,<br>    “   def   init  (self, name, features):\n”,<br>    “       \”\”\”Assumes name a string; features a list of numbers\”\”\”\n”,<br>    “       self.name, self.features = name, features\n”,<br>    “\n”,<br>    “   def distance(self, other):\n”,<br>    “       \”\”\”Assumes other an animal\n”,<br>    “       Returns the Euclidean distance between feature vectors\n”,<br>    “       of self and other\”\”\”\n”,<br>    “       return minkowskiDist(self.features, other.features, 2)”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 4,</p>
<p>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def compareAnimals(animals, precision):\n”,<br>    “   \”\”\”Assumes animals is a list of animals, precision an int &gt;= 0\n”,<br>    “   Builds a table of Euclidean distance between each animal\”\”\”\n”,<br>    “   names = [a.name for a in animals] # column and row labels\n”,<br>    “  vals = [[‘–’ if a1 == a2 else str(round(a1.distance(a2), precision))\n”,<br>    “            for a2 in animals] for a1 in animals]\n”,<br>    “   table = pylab.table(rowLabels = names, colLabels = names,\n”,<br>    “                       cellText = vals, cellLoc = ‘center’,\n”,<br>    “                       loc = ‘center’, colWidths = [0.2]*len(animals))\n”,<br>    “   table.scale(1, 2.5) # stretch vertically to make it look better\n”,<br>    “   pylab.axis(‘off’) # don’t display x and y-axes\n”,<br>    “   pylab.savefig(‘distances’)”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 5,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “rattlesnake = Animal(‘rattlesnake’, [1,1,1,1,0])\n”,<br>    “boa = Animal(‘boa\nconstrictor’, [0,1,0,1,0])\n”,<br>    “dartFrog = Animal(‘dart frog’, [1,0,1,0,4])\n”,<br>    “animals = [rattlesnake, boa, dartFrog]”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 6,<br>   “metadata”: {<br>    “collapsed”: false<br>   },<br>   “outputs”: [<br>    {<br>     “data”: {<br>      “image/png”: “iVBORw0KGgoAAAANSUhEUgAAAXwAAAD8CAYAAAB0IB+mAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFU<br>eJzt3XtQlPX+B/D3AiuLmtdMaxpRXFKPyKhcZBHdRfBkkpeO\nZpyjXFTMTMuOv7TyEioZjqWj6JgaZSmno4zYKJiX9AiJW2KeTJAAATG8c RIVxAst7Pf3B/lsBKgp\ny7J+36+ZnWGf2372s8++eXj2uw8qIQSIiOjR52DrAoiIqGkw8ImIJMHAJyKSBAOfiEgSDHwiIkkw\n8ImIJMHA JyKSBAOfiEgSDHwiIkkw8ImIJMHAJyKSBAOfiEgSDHwiIkkw8ImIJMHAJyKSBAOfiEgS\nDHwiIkkw8ImIJMHAJyKSBAOfiEgSDHwiIkkw8 ImIJMHAJyKSBAOfiEgSDHwiIkkw8ImIJMHAJyKS\nBAOfiEgSDHwiIkkw8ImIJMHAJyKSBAOfiEgSDHwiIkkw8ImIJMHAJyKSBAOfiEgSDH wiIkkw8ImI\nJMHAJyKSBAOfiEgSDHwiIkkw8ImIJMHAJyKSBAOfiEgSDHwiIkkw8ImIJMHAJyKSBAOfiEgSDHwi\nIkkw8ImIJMHAJyKSB AOfiEgSDHwiIkkw8ImIJMHAJyKSBAOfiEgSDHwiIkkw8ImIJOFk6wIIcHFx\nuXT79u3Otq6jOdBoNObbt2/zQATsxe9pNJqSW7dudbF1Hf ZOJYSwdQ3SU6lUgq9DDZVKBfaiBnth\n8VsvVLauw97x6IGISBIMfCIiSTDwiYgkwcAnIpIEA5+kVFRUhODgYFuXQdSkGPhERJJg4JO0rly 5\ngpdeegne3t5YvXo1SkpK8Nxzz0Gv12PEiBH45ZdfAAAREREwGAwYMGAAdu3aZeOqiR4cx+E3AxyH\nb9FUY8+Liorg4+ODwsJCaDQa+P j4wN/fH35+fggPD8fmzZtx4sQJrFy5Ejdu3ECrVq1QWloKvV6P\nrKwsq9cHcBz+73EcfuPgET5Jq1evXnjsscegVqvh4eGBM2fOwN/fHwD g7++PnJwcmM1mLF68GAEB\nARg7dizOnj1r46qJHhwD/xESFxen/FxUVFTr9ENkZCTS09Ot9tiLFi1CQkKC1bZvDTk5OaioqEBV\nVRWysr LQvXt3GI1GAIDRaETPnj3x448/4uTJk0hPT8f27dvh4GB/bxmtVnvfy167dg2bN2+ud15W\nVhZ8fX0xduzYxiqNmpj97b2E6urqeqffLfC prm7dumHq1Knw8/NDREQE3n33XfzrX//CkCFD8MUX\nX+Cdd95Bz549YTKZoNfrERMTg3bt2tm6bKsxm813Dfzk5GRMnz4dSUlJtaY3tD9S 88OLp9mJoqIi\nvPjii+jVqxfS09PRrVs3VFVVoUOHDti2bRt27NiB8+fPw2AwYNiwYTh69CiOHTsGg8GAFStW1NrW\nmjVrkJiYiKqqKky ZMgVRUVHYunUrVq5ciVatWsHPzw+xsbEwGAzo168fsrOzUV1dja+++grOzs54\n9tlnUVlZiZs3b2L16tXQ6XTKtsvLyxEeHo5XXnkFQUFB mD59OgoKCmAymbBy5Ur4+vo2devq1a1b\nNxw7dqzO9H379tWZdvDgQeXn1atXW7WuxmA2mxEeHo7i4mIMGDBAmX7o0CEsWbKk1n6j0Wig1 Wox\nfvx4fPvtt3B3d8fx48dhMBgwZ84chISEAACOHz+ODRs2wMXFBQUFBdBqtdi9ezdMJhOGDBkCf39/\nzJ49Gw4ODujbty/WrVsHs9mM sLAwnD9/HjqdDtu3b0d+fr6t2kIAIITgzca3mpfh7s6cOSMef/xx\nUVZWJioqKpTpc+fOFZ9//rkQQogePXoo0w8dOiSmTJmi3I+IiBCHD x8W2dnZYsSIEcJsNouqqiqh\n0+nE5cuXxciRI0Vubq4QQojq6mohhBB6vV58+eWXQgghpk6dKpKTk4UQQnn87OxsERgYKIQQIjo6\nWixf vlwMGzZMZGRkCCGE+Oijj0RsbKwQQohLly4Jf3//ez7P++mFLB60Fzt27BAvv/yyEEKI9PR0\n4erqKoQQDe43rq6uwmg0CiFq9rOgoKB6t xsdHS22bNkihBBi06ZNYvjw4cJsNgshhPDy8hIFBQVC\nCCEmTZokdu7cKZKSksS0adPq1PEgfuuFzd+r9n7jEb4d8fDwQJs2bZCRkYEFCx agsrISJSUlaNOm\nzX1vIysrC9nZ2QgMDARQc0ReXFyM2NhYfPjhh7hx4wbGjx+P0aNHAwC8vLwAAF27dkVpaSlu3bqF\nWbNmITc3F46Oj jh//ryy7bi4OMyYMQM+Pj4AgMzMTBiNRuzduxcAUFZW1ih9oLvLy8tT/pIaOHAg\nVKqawS2nTp2qd79xdHSEn5/fn34cPz8/ZdtlZWVwc3 MDYPnAWwih7Au/r4Nsh+fw7YijoyMAYOnS\npVi8eDHS0tIwatSoO38lwMnJCWazGQDQokULVFVV1dlG79690b9/fxw6dAipqan44Ycf0K9 fP3Tv\n3h0bN27Ep59+itdee01Z/vdvUiEE9u7dC0dHRxw+fBjr1q1THhsAYmJi8OOPP+Kzzz4DAPTp0wfh\n4eFITU1Famoq/vvf/zZ6T6 gud3d3fP/99wCAY8eOKa9RQ/uNSqVSXueG9pv63NkfAaBt27YoLCwE\nYPnAW6vV1lsH2Q4D3w6FhoZiypQpeOGFF/C///1PmT5u3DiEhIQ</p>
<p>gLi4Offv2RUFBAcaNG4fMzExl\nGQ8PDwQHB0Ov1yMwMBCjR49GVVUV5syZgyFDhsBgMGDatGkNPrZOp8MPP/yA4OBgbNu2rdY8Jycn\nJC Qk4D//+Q8+/vhjTJ06Fbm5uQgMDERgYCDmz5/f+M1oJPf6kHvChAkPvG5TGz16NMrKyqDX6/Hl\nl1/CyanmD/mG9pvf69KlC1xcXDB27Nh an13cS1xcHCZMmICAgACo1WqMGjUKY8aMwdWrV6HX65GU\nlARnZ+dGeX704PjFq2aAX7yysNWXjVJTU5GQkID4+Pg686qrq2sdzf6Zdetz r+3d8Sh88cpkMkGt\nVuPIkSOIjY1FSkrKA22HX7xqHDyHT3brrbfewjfffAONRoO3334bO3bswKlTp2A2m7Fq1Sr4+voi\nMjISarUaFy5 cQGlpKXbt2oXWrVtj7NixuHnzJlQqFTZu3IiVK1fWGtW0Zs0aaDQanDt3Dm+++Sai\noqKQn5+PX3/9Fa+88gpOnz4NJycnrFq1qs66JpOp zoiVs2fPKqOs1Go1Pv30U1u3r0mEhobi8uXL\nqKysxIYNG2xdjvQY+GSXvvrqKxQXF8NoNEKlUiEpKQkmkwnp6ekoLCxEaGgoMjIyANR8l vDxxx/j\n/fffR2JiIvz9/dG+fXvs2bMHQM0wxtmzZ9c5Snd1dcX69etrPW58fDw6d+6sBHZ1dXWddb29vZGY\nmAg3NzdMnjwZycnJ8PT0 RFFREQ4ePPinPmS3d38cs0+2xXP4ZJeysrIQGBiofNiYn5+vXBbBzc0N\nV69eVZb940ij/v37w8vLCxMnTsSsWbNQXl5e72Pc2d4fH3fo0 KHK/fpOzdQ3YgWwjLIishUGPtkl\nDw8PpKWlKffd3d2VyyIUFhbW+kbsH0caVVZWKkflnTp1wpYtW+odnVJfmHt4eCA1NVW5bzab66xb\n 34iVhrZH1JQY+GSXRowYgaeeego6nQ5Dhw5Fq1at4OjoiICAAEyYMAFr1qxpcN3s7GwMHjwYBoMB\n+/fvx/PPP9/gqKY/ioqKwoULFxAQE IChQ4fi5MmTddatb8QKUXPAUTrNAEfpWDwKI1MaC3thwVE6\njYNH+EREkmDgExFJgoFPRCQJBj4RkSQY+EREkmhW37R1cXG5dPv27c62rq OpaTQaXjr2N+yFBXth\nodFozLau4VHQrIZlyjo8kcPvLNgLC/bCgsMyGwdP6RARSYKBT0QkCQY+EZEkGPhERJJg4BMRSYKB\nT0QkCQY+E ZEkGPhERJJg4BMRSeKRCvy4uDjl56KiIuzatUu5HxkZifT0dKs99qJFi5CQkGC17dPD\nefbZZ9GpUye89957DS4THR0NrVar3F+4cCFcXV 0RHBxcZ9m8vDyo1Wqr7lPW1FD9b7zxBvz8/ODn\n54dly5bVmnflyhV06NBB2c/T0tIwaNAg6PV6BAYGori4uMnqpwdjl4FfXV1d7/S7BT7 J7ZNPPsEH\nH3zQ4PySkhLk5eXVmvbqq6/i0KFD9S4fExMDvV7fqDU2pYbqnzFjBr777jsYjUbs3LkTBQUFyrzY\n2Nha/9hdp9PhyJEjSE tLQ1hYWK33HzVPdhP4RUVF8PHxQVhYGLRaLQIDAzF48GCMHj0at2/fxhdf\nfIHz58/DYDBg6dKlWLlyJXbv3g2DwYDjx4/X2taaNWswePB g6HQ6xMfHAwC2bt0KX19fBAYG4p13\n3gEAGAwGvPHGG/jrX/+KoKAgVFZWAqg5WjQYDPD19cW3335ba9vl5eUYM2YM9u7dC5PJhKioKAQG<br>\nBiIgIAAZGRlN0Cmqz9NPP33X+TExMcrrfseTTz4JB4e6b5GjR4+iS5cu99xmc3W3+t3d3QEADg4O\ncHJyUv7x+s8//4yLFy/C29tbWbZ FixbKz+Xl5fD09LRy5fTQhBDN5lZTTv3OnDkjHn/8cVFWViYq\nKiqU6XPnzhWff/65EEKIHj16KNMPHTokpkyZotyPiIgQhw8fFtnZ2WLE iBHCbDaLqqoqodPpxOXL\nl8XIkSNFbm6uEEKI6upqIYQQer1efPnll0IIIaZOnSqSk5OFEEJ5/OzsbBEYGCiEECI6OlosX75c\nDBs2TGR kZAghhPjoo49EbGysEEKIS5cuCX9//3qf292et2ys2YtNmzaJmJiYOtPz8vJERESEEKL2\nPiREzX4XFBRUa9rIkSPF5cuXlX3KWqzVi/up PyEhQYSHhyv3J0+eLLKzs0V0dLTYsmWLMj0lJUV4\neXkJd3d3cfr0aavUK4TSC5tnlL3fmtXlke/Fw8MDbdq0QUZGBhYsWIDKykqUlJSgT Zs2972NrKws\nZGdnIzAwEEDNkUlxcTFiY2Px4Ycf4saNGxg/fjxGjx4NAPDy8gIAdO3aFaWlpbh16xZmzZqF3Nxc\nODo64vz588q24+Li MGPGDPj4+AAAMjMzYTQasXfvXgBAWVlZo/ShMa1duxbbt2+Hk5MTqqqqAAAp\nKSlo3bq1jStrOosWLcKSJUvua9ndu3fD29sbHTt2tHJV1 nE/9R84cACbNm1CcnIygJr9WKVSoXfv\n3nWWDQkJQUhICBITEzFv3jwkJiZarXZ6eHYV+Hf+vFy6dCkWL14MnU6HuXPnKpeQdXJygtlsho OD\nA1q0aKEE2O/17t0b/fv3R1JSElQqFUwmE9RqNW7evImNGzeisrIS7u7uSuD//nrkQgjs3bsXjo6O\nOHz4MLKzszFq1ChlfkxMDPbt2 4fPPvsMkZGR6NOnD7RaLf75z38CAH799Ver9eZBzZw5EzNnzrR1\nGTZVWFiIGTNmAAAuXryI119/vcHz0SdOnEBqaiqMRiMyMzORk5ODbd u2wdXVtSlLfmD3qv/o0aNY\nuHAh9uzZAxcXFwDA8ePHkZubi+HDhyM/Px+tWrXCM888A09PT2g0GgBAu3bt0LJlS5s9L7o/dhX4\nd4SGh mLKlCno2bMn2rZtqxzhjxs3DiEhIXjuuecwadIkFBQUYNy4cYiOjlbW9fDwQHBwMPR6PRwd\nHeHi4oJdu3Zhzpw5yMzMhMlkwrRp0xp8bJ 1Oh9jYWAQHB2PQoEG15jk5OSEhIQGTJk2CyWTC1KlT\n8dprryl/TXh7e9/1g0OynqlTp8JoNKKyshLff/89Fi1ahK+//hpz5syp9TmMVqt Vwn7t2rXYunUr\nfvrpJwQHB2PDhg2YP38+5s+fD6Bm5FdUVJTdhD2Aeuv/6aef8M033yAsLAxTpkwBAIwZMwYAsGLF\nCkRGRiIyMhJAzV 9DWq0Wvr6+iI+Px5YtW+Dg4ABnZ2ds2LDBJs+J7h//AUozwH90YcFeWLAXFvwH\nKI3DbkbpEBHRw2HgExFJgoFPRCQJBj4RkSQY+EREkmD gExFJgoFPRCQJBj4RkSQY+EREkmDgExFJ\ngoFPRCSJZnXxNI1GY1apVNL9EtJoNLWuyikz9sKCvbDQaDRmW9fwKODF05oBXiTLgr2wYC8s ePG0\nxiHd0TQRkawY+EREkmDgExFJgoFPRCQJuwn8oqIiBAcH27oMIiK7ZTeBT0RED8euAv/KlSt46aWX\n4O3tjdWrV6OkpATPPfcc9Ho 9RowYgV9++QUAEBERAYPBgAEDBmDXrl02rpqIqHmwm3H4RUVF8PHx\nQWFhITQaDXx8fODv7w8/Pz+Eh4dj8+bNOHHiBFauXIkbN26gVatW KC0thV6vR1ZWVhM/kz+H460t\n2AsL9sKC4/Abh10d4ffq1QuPPfYY1Go1PDw8cObMGfj7+wMA/P39kZOTA7PZjMWLFyMgIABjx47F\n2bN nbVw1EVHzYFeBn5OTg4qKClRVVSErKwvdu3eH0WgEABiNRvTs2RM//vgjTp48ifT0dGzfvh0O\nDnb1FBvVs88+i06dOuG9995rcJno6Gho tVrl/sKFC+Hq6lrvB+R5eXlQq9VIT0+3Sr3UdO71WkZE\nRCj7wJUrV2AwGJSbWq3G1atXsW/fPvj5+SmnVEtLS5vyKdADaFbX0rmXbt26Y erUqTh9+jQiIiLw\n97//HREREYiPj0fLli2xefNmtG7dGiaTCXq9Hv369UO7du1sXbbNfPLJJzhw4ADOnTtX7/ySkhLk\n5eXVmvbqq69i 0qRJePnll+ssHxMTA71eb5VaqWnd7bU8efIkrl27ptzv0KEDUlNTAQAZGRl49913\n0b59e/Tu3RtpaWlwdnbGunXrsGrVKsTExDRF+fSA7 Cbwu3XrhmPHjtWZvm/fvjrTDh48qPy8evVq\nq9bVnD399NN3nR8TE4N33nkHf/vb35RpTz75JIqKiuose/ToUXTp0gWOjo6NXSY1sXu9lj ExMZg3\nbx7mz59fZ15CQgImTpwIAOjatasy3dnZGU5OdhMn0pL3fIfkTp8+jYqKCnh6et7X8kuXLsXbb79t\n5aqoKdzttUxNTcUzzzyDz p0715lXVVWFlJQUjBkzptb0kpISrF27FtOnT7dKvdR4+CtZUosWLcKS\nJUvua9ndu3fD29sbHTt2tHJVtrV27Vps374dTk5OqKqqAgCkpK SgdevWNq6s8dzrtVy2bBm2bt1a\n65TOHfv374dOp6vVj/LycowbNw7r16/HE088YbW6qXEw8CVVWFiIGTNmAAAuXryI119/HXFxcfUu\ne<br>+LECaSmpsJoNCIzMxM5OTnYtm0bXF1dm7Jkq5s5cyZmzpxp6zKs6m6v5fXr13Hp0iWEhobi1q1b\nOHXqFJYuXaqc2klISEBYWJiyrVu3bu GFF17A/PnzMXDgQFs9JfozhBDN5lZTTtM4c+aM2LlzZ4Pz\n//GPfzzwun+WtZ53VFSU+Mtf/iJ69OghRo8eLX744QexfPnyOsv16NFD+Xn NmjVi0KBBokOHDiIo\nKEjk5+fXWjYiIkIcPnzYKvUKYb1e2CNr9+LOa7lnzx6xefPmWvPOnDkjgoKClPvXr18X3bt3FyaT\nSZn2wQcfiI 4dOwq9Xi/0er147733rFbrb72weUbZ+81uvnjV2FJTU5GQkID4+Pg686qrq+/64eTd\n1q3PvbbHL9hYsBcW7IUFv3jVOOwq8N966y18880 30Gg0ePvtt7Fjxw6cOnUKZrMZq1atgq+vLyIj\nI6FWq3HhwgWUlpZi165daN26NcaOHYubN29CpVJh48aNePPNN3Hs2DH07NkTK1aswJo1 a6DRaHDu\n3Dm8+eabiIqKQn5+Pn799Ve88sorOH36NJycnLBq1SosXLiw1romkwmzZ8+Gg4MD+vbti3Xr1uHs\n2bN48cUX0atXL6jVanz 66ad3e958Y/+GvbBgLywY+I3Dbs7hf/XVVyguLobRaIRKpUJSUhJMJhPS\n09NRWFiI0NBQZGRkAAD69OmDjz/+GO+//z4SExPh7++P9u3b Y8+ePQAAs9mM2bNn1zlKd3V1xfr1\n62s9bnx8PDp37qwEdnV1dZ11vb29kZiYCDc3N0yePBnJycnw9PREUVERDh48iDZt2jRFi4iI7spu\ nhmVmZWUhMDBQ+afO+fn5ymUV3NzccPXqVWVZLy8vADXjhEtLS9G/f394eXlh4sSJmDVrFsrLy+t9\njDvb++PjDh06VLlf36mZsrIyuLm5 KdvIyckBAHh4eDDsiajZsJvA9/DwQFpamnLf3d1duaxCYWFh\nrW/U3vmlANR8KF1ZWakclXfq1AlbtmxBixYtlKF3d9QX5h4eHsq3DIGav w7+uG7btm1RWFgIwHKJ\nh4a2R0RkK3YT+CNGjMBTTz0FnU6HoUOHolWrVnB0dERAQAAmTJiANWvWNLhudnY2Bg8eDIPBgP37\n9+P5559H 3759UVBQgHHjxiEzM7PBdaOionDhwgUEBARg6NChOHnyZJ114+LiMGHCBAQEBECtVmPU\nqFHWaAER0UOxqw9tH1X8cM6CvbBgLyz4oW3js JsjfCIiejgMfCIiSTDwiYgkwcAnIpIEA5+ISBLN\n6pu2Go3GrFKppPslpNFoan13QGbshQV7YaHRaMy2ruFRwGGZzQCH31mwFxbshQWHZT YO6Y6miYhk\nxcAnIpIEA5+ISBIMfCIiSTDwiYgkwcAnIpIEA5+ISBIMfCIiSTDwiYgkYZeBr9Vq73vZa9euYfPm\nzfXOy8rKgq+vL8aOH dtYpTU7eXl5UKvVSE9PrzX9jTfegJ+fH/z8/LBs2bJa865cuYIOHTogISEB\nAJCWloZBgwZBr9cjMDAQxcXFTVZ/Y2qoF3dEREQgODgYQE 0PDAaDclOr1bh69Sr27dsHPz8/6PV6\njBgxAqWlpU35FIgeil0G/v0ym813Dfzk5GRMnz4dSUlJtaZXV1c3RXlNIiYmBnq9vs70GTNm4Lv v\nvoPRaMTOnTtRUFCgzIuNja31D911Oh2OHDmCtLQ0hIWFIS4urklqb2wN9QIATp48iWvXrin3O3To\ngNTUVKSmpmL58uUICgpC+/bt0b t3b6SlpSEtLQ3PP/88Vq1a1VTlEz20ZnXxtIaYzWaEh4ejuLgY\nAwYMUKYfOnQIS5YsQVVVFTp06IBt27ZBo9FAq9Vi/Pjx+Pbbb+Hu7o7 jx4/DYDBgzpw5CAkJAQAc\nP34cGzZsgIuLCwoKCqDVarF7926YTCYMGTIE/v7+mD17NhwcHNC3b1+sW7cOZrMZYWFhOH/+PHQ6\nHbZv34 78/HxbteWejh49ii5dutT7z9Td3d0BAA4ODnByclKW+fnnn3Hx4kV4e3sry7Zo0UL5uby8\nHJ6enlauvPHdrRdAzS+DefPmYf78+XXmJSQ kYOLEiQCArl27KtOdnZ3h5GQXbyGiGkKIZnOrKaeu\nHTt2iJdfflkIIUR6erpwdXUVQghRUVGhLDN37lzx+eefCyGEcHV1FUajUQghxJkz Z0RQUFC9242O\njhZbtmwRQgixadMmMXz4cGE2m4UQQnh5eYmCggIhhBCTJk0SO3fuFElJSWLatGl16nhYDT3vhzVy\n5Ehx+fJlERERIQ4 fPlzvMgkJCSI8PFy5P3nyZJGdnV2rN0IIkZKSIry8vIS7u7s4ffq0VeoVwja9\nOHTokJg3b169+4rJZBLdu3cX169frzX90qVLol+/fqKk pMQq9QphvV7Yo996YfOMsvebXRye5OXl\nwdfXFwAwcOBA5ZKxp06dwoIFC1BZWYmSkhK0adMGAODo6Ag/P78//Th+fn7KtsvKyuDm5gYA8 Pf3\nR05ODoQQ8PHxqVNHc7R79254e3ujY8eODS5z4MABbNq0CcnJyQCAzMxMqFQq9O7du86yISEhCAkJ\nQWJiIubNm4fExESr1d7Y7tWL</p>
<p>ZcuWYevWrbVO6dyxf/9+6HQ6tG7dWplWXl6OcePGYf369XjiiSes\nVrctrV27Ftu3b4eTkxOqqqoAACkpKbX6QPbHLgLf3d0dX3/9NaZMm YJjx44pl4xdunQpFi9eDJ1O\nh7lz5yrTVSqVEsYtWrRQdth7+f2f+23btkVhYSHc3NxgNBoxevRoVFVV4cCBA3XqaI5OnDiB1NRU\nGI1G ZGZmIicnB9u2bYOrqyuAmlMcCxcuxJ49e+Di4gKg5jRXbm4uhg8fjvz8fLRq1QrPPPMMPD09\nodFoAADt2rVDy5Ytbfa8HsTdenH9+nVcu nQJoaGhuHXrFk6dOoWlS5cqp3YSEhIQFhambOvWrVt4\n4YUXMH/+fAwcONBWT8nqZs6ciZkzZ9q6DGpkdnE9/OrqauXc+cCBA7Fjxw7k5+ fj3//+N2JiYtCz\nZ0+0bdsWWq0WCxYsgFarVc6tm81mhISEoGXLlnj11VcRFBSkbHfRokXQarWYOHEiPvvsM5w7dw4L\nFiwAABiNRvzf/<br>/0fHB0d0adPH6xfvx5msxkTJkzAxYsX4ePjg+TkZOTm5jbG87bqL4/IyEhERUWh\noqICv/zyC8LCwuDh4QEAePzxxwEAK1asgJeXl7LO73 sTHx+PLVu2wMHBAc7OztiwYYPyi6Ox2aIX\ndxQVFSEqKgoHDhwAAFRUVMDT0xN5eXnKufoPP/wQy5YtU/o3bNiwes/7NwZeD9+C18NvHHY R+M2J\nyWSCWq3GkSNHEBsbi5SUlIfeJt/YFuyFBXthwcBvHHZxSqc5CQ0NxeXLl1FZWYkNGzbYuhwiovvG\nI/xmgEdyFuyFBXthwSP8xv FIf/GKiIgsGPhERJJg4BMRSYKBT0QkCQY+EZEkGPhERJJg4BMRSYKB\nT0QkCQY+EZEkmtWlFTQaTYlKpeps6zqamkajMatUKv7yBXvxe+y FhUajKbF1DY+CZnVpBSIish4e\nPRARSYKBT0QkCQY+EZEkGPhERJJg4BMRSYKBT0QkCQY+EZEkGPhERJJg4BMRSYKBT0QkCQY+EZEk\nGP hERJJg4BMRSYKBT0QkCQY+EZEkGPhERJJg4BMRSYKBT0QkCQY+EZEkGPhERJJg4BMRSYKBT0Qk\nCQY+EZHcjvbEAAABA0lEQVQkGPhERJJ g4BMRSYKBT0QkCQY+EZEkGPhERJJg4BMRSYKBT0QkCQY+\nEZEkGPhERJJg4BMRSYKBT0QkCQY+EZEkGPhERJJg4BMRSYKBT0QkCQY+EZEk GPhERJJg4BMRSYKB\nT0QkCQY+EZEkGPhERJJg4BMRSYKBT0QkCQY+EZEkGPhERJJg4BMRSYKBT0QkCQY+EZEkGPhERJJg\n4BMRSYKBT0Q kCQY+EZEkGPhERJJg4BMRSYKBT0QkCQY+EZEkGPhERJJg4BMRSYKBT0QkCQY+EZEk\nGPhERJJg4BMRSYKBT0QkCQY+EZEkGPhERJJg4BMR<br>SYKBT0QkCQY+EZEk/h8nh9/arYg0cAAAAABJ\nRU5ErkJggg==\n”,<br>      “text/plain”: [<br>       “<matplotlib.figure.figure at="" 0x105e0cc50="">“<br>      ]<br>     },<br>     “metadata”: {},<br>     “output_type”: “display_data”<br>    }<br>   ],<br>   “source”: [<br>    “compareAnimals(animals, 3)”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 7,<br>   “metadata”: {<br>    “collapsed”: false<br>   },<br>   “outputs”: [<br>    {<br>     “data”: {<br>      “image/png”: “iVBORw0KGgoAAAANSUhEUgAAAYEAAAD8CAYAAACRkhiPAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFU<br>eJzt3Xl4TIfeB/BvlmHS2K6l1O2DkNi51UhM1pkYxHItbVT1\ntYTiaiulVVQtRSPl0XvdEtUWVyzRB4/lRQjeqiDiCl5LIi8RSTS2EFuqj WQm83v/yHVGmgWRydLz\n/TzPPE/mbPM7vzmZ75w5Z87YiQiIiEid7Cu7ACIiqjwMASIiFWMIEBGpGEOAiEjFGAJERCrGECAi\nUjGGABGR ijEEiIhUjCFARKRiDAEiIhVjCBARqRhDgIhIxRgCREQqxhAgIlIxhgARkYoxBIiIVIwh\nQESkYgwBIiIVYwgQEakYQ4CISMUYAkREKsYQI CJSMYYAEZGKMQSIiFSMIUBEpGIMASIiFWMIEBGp\nGEOAiEjFGAJERCrGECAiUjGGABGRijEEiIhUjCFARKRiDAEiIhVjCBARqRhDgIhIxR<br>gCREQqxhAg\nIlIxhgARkYoxBIiIVIwhQESkYgwBIiIVYwgQEamYY2UXUBU5OTndfPToUePKrqMq0Gq1lkePHvHN\nAtiLJ7EXVlqtNjMnJ 6dJZddRVnYiUtk1VDl2dnbCvhSws7MDe1GAvbBiL6z+0wu7yq6jrJjkREQq\nxhAgIlIxhgARkYoxBIiIVIwhQFVCeno6evToUdllEKkOQ4 CISMUYAlRl3L17F2+//Ta6du2KJUuW\nIDMzE3369IFer0ffvn1x+/ZtAEBwcDAMBgNef/117Ny5s5KrJqre+D2BYvB7AlYVdT54eno6PDw 8\nkJqaCq1WCw8PD3h7e0On02HkyJFYt24dzpw5g8WLF+PXX3+Fs7Mz7ty5A71ej8TERJvXB/Dc+Cex\nF1b8ngBROWnbti1q164NjUaDjh 07Ii0tDd7e3gAAb29vXLhwARaLBfPmzYOvry+CgoJw5cqVSq6a\nqHpjCNjQ0qVLlb/T09MLfXQxatQoxMbG2uyx586di8jISJst3xYuXLi Ahw8fwmw2IzExES4uLoiL\niwMAxMXFoU2bNjh79izOnTuH2NhYbNmyBfb21W8TdnV1feZp79+/j3Xr1hU7LjExEZ6enggKCiqv\n0irNk/ 8Pj/uzd+9erF+//rmXFRMTg3PnzpVrfX9k1e8/qArKz88vdnhpIUBFtWjRAuPGjYNOp0Nw\ncDA+//xzbNiwAf7+/vjhhx/w2WefoU2bNjC ZTNDr9QgNDUW9evUqu2ybsVgspYbArl278P7772Pr\n1q2Fhpe0PVY3vXv3xogRI557vucNgT9Kv8qKF5Aro/T0dLz11lto27YtYmNj0aJF C5jNZtSvXx+b\nNm3Ctm3bcO3aNRgMBvTs2RPHjx/HiRMnYDAY8I9//KPQssLDw7F582aYzWaMGTMGY8eOxcaNG7F4\n8WI4OztDp9NhwYI FMBgMeO2115CUlIT8/Hzs2bMHNWvWRGBgIHJzc/Hbb79hyZIl8PLyUpadnZ2N\nkSNH4r333oPRaMT777+Py5cvw2QyYfHixfD09Kzo1hWr RYsWOHHiRJHh+/btKzLswIEDyt9Lliyx\naV3lwWKxYOTIkcjIyMDrr7+uDD948CC++OKLQtuNVquFq6srhgwZgmPHjsHNzQ2nTp2CwWDA1 KlT\n0a9fPwDAqVOn8P3338PJyQmXL1+Gq6srdu/eDZPJBH9/f3h7e2Py5Mmwt7dHp06dsHz5clgsFowY\nMQLXrl2Dl5cXtmzZgpSUlArv R1ZWFt5++23k5+fDZDIhIiKi2OnWrFmDq1evYtasWdi0aRO+/PJL\nuLq64uHDh/jss89gMBiKbPtt2rTBmjVr4OTkhFWrVuHAgQNYvXo1V q1aBQAYP3483n33XaxZs6ZQ\nvyZPnlyRLahaRIS3390K2lK6tLQ0adiwoTx48EAePnyoDJ82bZqsXbtWRERatWqlDD948KCMGTNG\nuR8c HCxHjhyRpKQk6du3r1gsFjGbzeLl5SVZWVnSv39/uXjxooiI5Ofni4iIXq+X7du3i4jIuHHj\nZNeuXSIiyuMnJSVJQECAiIjMmTNHFi1aJ D179pT4+HgREfn2229lwYIFIiJy8+ZN8fb2fup6Pksv\n1KKsvdi2bZv87W9/ExGR2NhYad68uYhIidtN8+bNJS4uTkQKtjOj0VjscufMmS Pr168XEZGIiAjp\n3bu3WCwWERFxd3eXy5cvi4jI6NGjZceOHbJ161YZP358kTrK4kW2i7y8PMnNzRURkT179sjo0aOV\n/wcR6/9NRESEh IaGitlsFjc3N8nOzpa8vDxp3769HDx4UERK3vYf9+XWrVvSuXNnyc3NldzcXOnc\nubPcunWrSL9exH96UemvW2W9cU/gBXTs2BF16tRBfH w8Zs2ahdzcXGRmZqJOnTrPvIzExEQkJSUh\nICAAQME794yMDCxYsAB///vf8euvv2LIkCEYOHAgAMDd3R0A0KxZM9y5cwc5OTmYNGkSLl6 8CAcH\nB1y7dk1Z9tKlSzFhwgR4eHgAABISEhAXF4e9e/cCAB48eFAufaDSJScnK3tc3bp1g51dwYkk58+f\nL3a7cXBwgE6ne+7H0el0yr IfPHiAli1bArAeVBcRZVt4so6Kdv/+fUyYMAE3b95EXl4eateujT//\n+c8lTp+VlYXGjRujdu3aAIAuXboAQKnb/mOpqano1KkTatSoAQD o1KkT0tLSABTul5rxmMALcHBw\nAACEhYVh3rx5OHToEAYMGKCcOufo6AiLxQIAqFGjBsxmc5FltGvXDl26dMHBgwcRExOD06dP47XX\nXo OLiwtWrFiB1atX48MPP1Smf3KjFRHs3bsXDg4OOHLkCJYvX17otL3Q0FCcPXsWa9asAQB06NAB\nI0eORExMDGJiYvC///u/5d4TKsrNzQ0 nT54EAJw4cUJ5jkrabuzs7JTnuaTtpjiPt0cAqFu3LlJT\nUwFYD6q7uroWW0dFi4yMRJcuXXD48GF8/vnnT62jYcOGyMzMVE4aOHPmDACU uO0/2TMXFxecO3cO\neXl5yMvLQ0JCAlxcXAAU7peaMQTKwdChQzFmzBi88cYbuHXrljJ88ODB6NevH5YuXYpOnTrh8uXL\nGDx4MBISEpR pOnbsiB49ekCv1yMgIAADBw6E2WzG1KlT4e/vD4PBgPHjx5f42F5eXjh9+jR69OiB\nTZs2FRrn6OiIyMhI/PTTT1i5ciXGjRuHixcvIiAg AAEBAZg5c2b5N6OcPO1A+rBhw8o8b0UbOHAg\nHjx4AL1ej+3bt8PRsWAHvKTt5klNmjSBk5MTgoKCCh0LeZqlS5di2LBh8PX1hUajwYABA</matplotlib.figure.figure></p>
<p>zBo0CDc\nu3cPer0eW7duRc2aNctl/Z5Xr169sHHjRvTp0wc//fTTU6d3cHDA3Llz4evri7feegsvv/wyatSo\nUeK237NnT6xcuRKDBw9G w4YN8cEHH8DX1xe+vr4ICQlBo0aNbLl61Q6/LFYMflnMqrK+FBQTE4PI\nyEjlgN6T8vPzS30XV9q8xXna8h77I3xBymQyQaPR4OjRo1iwY AGioqLKtJyK7sXjuk0mE9zd3bF/\n/340aVI1fsyrun9ZjMcEqNx8+umnOHz4MLRaLaZPn45t27bh/PnzsFgs+Prrr+Hp6YlRo0ZBo9Hg\n<br>+vXruHPnDnbu3IlatWohKCgIv/32G+zs7LBixQosXry40NlU4eHh0Gq1uHr1KqZMmYKxY8ciJSUF\neXl5eO+993Dp0iU4Ojri66+/LjKvy WQqcqbMlStXlLO7NBoNVq9eXdntqxBDhw5FVlYWcnNz8f33\n31d2Oc9szZo12LBhg3K2W1UJgD+Eyj4yXRVv4Bkximftxe7du+Wdd95Rzr bYsmWLjB49WkRELl++\nLB4eHiJScFbUP//5TxERCQsLk/DwcDl16pS88847yrLy8/OLPZvqyy+/VO4/PoPkm2++kenTpyvD\nzWZzkXmLO 1PmybO7yrsXasBeWKGanx3EYwJULhITExEQEKAc0ExJSVEu+dCyZUvcu3dPmfb3Zzh1\n6dIF7u7uGD58OCZNmoTs7OxiH+Px8n7/uN27d1 fuF/exTnFnygDWs7uI1IwhQOWiY8eOOHTokHLf\nzc1NueRDampqoW/2/v4Mp9zcXEyePBmRkZFo1KgR1q9fX+xZMcW9wHfs2BExMTHKfYv FUmTe4s6U\nKWl5RGrDEKBy0bdvXzRt2hReXl7o3r07nJ2d4eDgAF9fXwwbNgzh4eElzpuUlAQ/Pz8YDAbs378f\nf/3rX0s8m+r3xo4di+ vXr8PX1xfdu3fHuXPnisxb3JkyRFSAZwcVg2cHWf0RzogpL+yFFXthVd3P\nDuKeABGRijEEiIhUjCFARKRiDAEiIhVjCBARqVipl41wcnK 6+ejRo8YVVUxVodVqeYnZ/2AvrNgL\nK/bCSqvVWiq7hhdR6imiaj1Vkqe/WbEXVuyFFXthxVNEiYio2mIIEBGpGEOAiEjFGAJERCrGECAi<br>\nUjGGABGRijEEiIhUjCFARKRiDAEiIhWzaQgsXbpU+Ts9PR07d+5U7o8aNQqxsbE2e+y5c+ciMjLS\nZsunFxMYGIhGjRph/vz5JU4zZ84 cuLq6Kvdnz56N5s2bo0ePHkWmTU5Ohkajsek2ZUsl1f/RRx9B\np9NBp9Nh4cKFhcbdvXsX9evXV7bzQ4cOwcfHB3q9HgEBAcjIyKiw+stT Sb3Yvn072rVrB61WqwzL\nyclBz5494evrC51Oh+joaGUZ3t7eMBgM8PHxwdmzZyt0HaqTcgmB/Pz8YoeXFgKkbv/617/w1Vdf\nlTg+MzM TycnJhYZ98MEHOHjwYLHTh4aGQq/Xl2uNFamk+idMmIB///vfiIuLw44dO3D58mVl3IIF\nC+Dt7a3c9/LywtGjR3Ho0CGMGDGi0P9fdVJS L/z9/XH69Gm8+uqryjBHR0esXLkSsbGxiIqKwkcf\nfQQAaNmyJY4ePYqYmBiEhoaW+mZD7cocAunp6fDw8MCIESPg6uqKgIAA+Pn5YeDAg Xj06BF++OEH\nXLt2DQaDAWFhYVi8eDF2794Ng8GAU6dOFVpWeHg4/Pz84OXlhVWrVgEANm7cCE9PTwQEBOCzzz4D\nABgMBnz00Ufo1asX jEYjcnNzARS8qzQYDPD09MSxY8cKLTs7OxuDBg3C3r17YTKZMHbsWAQEBMDX\n1xfx8fFlXX16QU/+IxcnNDRUed4fe+WVV2BvX3STPX78O<br>Jo0afLUZVZVpdXv5uYGALC3t4ejoyMc\nHBwAAD///DNu3LiBrl27KtPWqFFD+Ts7OxudO3e2ceXlr7ReNGjQoNBeAABoNBq0aNECAODk5K Rs\nH46OjsoF7qprLyqMiJR4KxhdvLS0NGnYsKE8ePBAHj58qAyfNm2arF27VkREWrVqpQw/ePCgjBkz\nRrkfHBwsR44ckaSkJOnbt69YL BYxm83i5eUlWVlZ0r9/f7l48aKIiOTn54uIiF6vl+3bt4uIyLhx\n42TXrl0iIsrjJyUlSUBAgIiIzJkzRxYtWiQ9e/aU+Ph4ERH59ttvZc GCBSIicvPmTfH29i523Upb\nb7WxZS8iIiIkNDS0yPDk5GQJDg4WkcLbkEjBdmc0GgsN69+/v2RlZSnblK3YqhfPUn9kZKSMHDlS\nuf/uu<br>+9KUlKSzJkzR9avX68Mj4qKEnd3d3Fzc5NLly7ZpF6Ryu3F77eJx8aNGyerV69W7p88eVJ0\nOp00bdpU/v3vf9ukXhGlF6W+llblW6mXkn 6ajh07ok6dOoiPj8esWbOQm5uLzMxM1KlT55mXkZiY\niKSkJAQEBAAoSO2MjAwsWLAAf//73/Hrr79iyJAhGDhwIADA3d0dANCsWTPcuXM HOTk5mDRpEi5e\nvAgHBwdcu3ZNWfbSpUsxYcIEeHh4AAASEhIQFxeHvXv3AgAePHjwIqtvE8uWLcOWLVvg6OgIs9kM\nAIiKikKtWrUqub KKM3fuXHzxxRfPNO3u3bvRtWtXNGjQwMZV2caz1P/jjz8iIiICu3btAlCwHdvZ\n2aFdu3ZFpu3Xrx/69euHzZs3Y8aMGdi8ebPNai9vL/J choaGok6dOhg9erQyzN3dHceOHUN8fDxC\nQkK451+CFwqBx7umYWFhmDdvHry8vDBt2jTlErOOjo6wWCywt7dHjRo1lBe1J7Vr1w5dunTB 1q1b\nYWdnB5PJBI1Gg99++w0rVqxAbm4u3NzclBB48hrmIoK9e/fCwcEBR44cQVJSEgYMGKCMDw0Nxb59\n+7BmzRqMGjUKHTp0gKurKz7<br>++GMAQF5e3ousvk2EhIQgJCSkssuoVKmpqZgwYQIA4MaNG5g4cWKJ\nn2+fOXMGMTExiIuLQ0JCAi5cuIBNmzahefPmFVlymT2t/uPHj2P2 7NmIjo6Gk5MTAODUqVO4ePEi\nevfujZSUFDg7O6N169bo3Lmz8nFJvXr18NJLL1XaepVFWZ/LZcuW4dKlS1i7dq0y7NGjR9W6FxWq\ntN0 EPOXjoMe75T/88IO0a9dOBg0aJMHBwcou/syZM6V3796yZMkSyc7OFl9fXwkKCpJz584V2t37\n5ptvxM/PTwwGg/Tp00dMJpN88MEH4ufn JzqdTubPny8iBR8HZWRkiIhIaGioREREyI0bN8TDw0OM\nRqN8/vnnyq7i491ks9ksI0aMkBUrVkheXp6MHz9eDAaDGAwGmTJlSmm7dyS26 8XYsWOlffv20qpV\nKxk4cKCcPn1aFi1aVGS6J3f9w8PDxcfHR+rXry9Go1FSUlIKTVtdPw567HH90dHRsm7dOhER6dCh\ng3To0EH0er3o 9Xo5efJkoXme/Dho5cqV4u/vLwaDQQIDAyU9Pd1mtVZGLw4fPixGo1GcnJzEaDTK\n1q1bJTMzU+zt7cXHx0fpkdlslqioKOU1xWAwyOnTp 21WK6r5x0H8UZli8AczrNgLK/bCir2w4o/K\nEBFRtcUQICJSMYYAEZGKMQSIiFSMIUBEpGIMASIiFWMIEBGpGEOAiEjFGAJERCrGECAiUj<br>GGABGR\nipV6FVGtVmuxs7NTXVBotdpCVytVM/bCir2wYi+stFqtpbJreBG8gFwxeHEsK/bCir2wYi+seAE5\nIiKqthgCREQqxhAgIlIxh gARkYqVOQTS09PRo0eP8qyFiIgqGPcEiIhU7IVC4O7du3j77bfRtWtX\nLFmyBJmZmejTpw/0ej369u2L27dvAwCCg4NhMBjw+uuvY+fOne VSOBERvbgyf08gPT0dHh4eSE1N\nhVarhYeHB7y9vaHT6TBy5EisW7cOZ86cweLFi/Hrr7/C2dkZd+7cgV6vR2Jioq3Wp1zwHGgr9sKK\nv bBiL6xU/T2Btm3bonbt2tBoNOjYsSPS0tLg7e0NAPD29saFCxdgsVgwb948+Pr6IigoCFeuXCmX\nwomI6MW9UAhcuHABDx8+hNlsRmJiIl xcXBAXFwcAiIuLQ5s2bXD27FmcO3cOsbGx2LJlC+zt1XsY\nIjAwEI0aNcL8+fNLnGbOnDlwdXVV7s+ePRvNmzcv9iB8cnIyNBoNYmNjbVI vVZynPZfBwcHKNnD3\n7l0YDAblptFocO/ePezbtw86nU75OPbOnTsVuQrlpqRebN++He3atYNWq1WG5eTkoGfPnvD19YVO\np0N0dLSyDG 9vbxgMBvj4+ODs2bMVug7VioiUeCsYXby0tDTp2rWrDB06VNzd3WXx4sVy48YN6dWr\nl/j5+UlgYKBkZmbKr7/+Kt27dxd/f3+ZOHGiNGv WrMRlVhWlrfeLyMjIkIiICAkNDS12/M2bN2Xo\n0KHSqlUrZdj169fl8uXLYjQai0w/fPhwMRqNcuTIEZvUK2K7XlRHtuxFac/l2bNnZcCA AcVuA8eP\nH5fAwEAREbly5Yo8evRIRES++eYbmTVrls3qrYxeZGVlSU5OTqH/j7y8PElLSxMRkdu3b0vr1q1F\nRMRkMonFYhERkQMHDsj gwYNtVu9/elHqa2lVvpV6AbnStGjRAidOnCgyfN++fUWGHThwQPl7yZIl\nZX3Iau/VV18tdXxoaCg+++wzvPnmm8qwV155Benp6UWmPX78 OJo0aQIHB4fyLpMq2NOey9DQUMyY\nMQMzZ84sMi4yMhLDhw8HADRr1kwZXrNmTTg6lvnfu9KU1osGDRoUGabRaNCiRQsAgJOTk/JJw5Pr\ nnp2djc6dO9um4D8A9X42U8VcunQJDx8+fOaNNSwsDNOnT7dxVVQRSnsuY2Ji0Lp1azRu3LjIOLPZ\njKioKAwaNKjQ8MzMTCxbtgzvv/++ Teq1pRfZrj/++GNMmzZNuX/q1Cl4eXlhwoQJ6NWrV3mV+IdT\n/d4q/EHNnTsXX3zxxTNNu3v3bnTt2rXYd0Z/JMuWLcOWLVvg6OgIs9kMA IiKikKtWrUqubLy87Tn\ncuHChdi4cSPu379fZNz+/fvh5eVVqB/Z2dkYPHgwvvvuO7z88ss2q9sWXmS7Dg0NRZ06dTB69Ghl\nmLu7O44d O4b4+HiEhIQgPj6+PMv9w2AIVBGpqamYMGECAODGjRuYOHEili5dWuy0Z86cQUxMDOLi\n4pCQkIALFy5g06ZNaN68eUWWbHMhISEICQmp7 DJsqrTn8pdffsHNmzcxdOhQ5OTk4Pz58wgLC1M+\nFoqMjMSIESOUZeXk5OCNN97AzJkz0a1bt8papTIr63a9bNkyXLp0CWvXrlWGPXr0SD mAXK9ePbz0\n0ks2rb1aK+2AASrwoGBaWprs2LGjxPH/9V//VeZ5n5et1nvs2LHSvn17adWqlQwcOFBOnz4tixYt\nKjLdkwe+wsPDxcfHR<br>+rXry9Go1FSUlIKTRscHMwDwxXE1r14/FxGR0fLunXrCo1LS0srdGD4l19+\nERcXFzGZTMqwr776Sho0aCB6vV70er3Mnz/fZrVWRi8OHz 4sRqNRnJycxGg0ytatWyUzM1Ps7e3F\nx8dHWW+z2SxRUVHi5+cnBoNBDAaDnD592ma1opofGK4yPyoTExODyMhIrFq1qsi4/Pz8Ug+AljZ v\ncZ62PH4Rxoq9sGIvrNgLq+r+ZbEXCoFPP/0Uhw8fhlarxfTp07Ft2zacP38eFosFX3/9NTw9PTFq\n1ChoNBpcv34dd+7cwc6dO1GrVi 0EBQXht99+g52dHVasWIEpU6bgxIkTaNOmDf7xj38gPDwcWq0W\nV69exZQpUzB27FikpKQgLy8P7733Hi5dugRHR0d8/fXXmD17dqF5TSY TJk+eDHt7e3Tq1AnLly/H\nlStX8NZbb6Ft27bQaDRYvXp1aevNDfw/2Asr9sKKvbCq7iFQ5mMCe/bsQUZGBuLi4mBnZ4etW7fC\nZDIhNj YWqampGDp0qHIgpkOHDli5ciW+/PJLbN68Gd7e3vjTn/6kfLHDYrFg8uTJRd7NN2/eHN99\n912hx121ahUaN26svIjn5+cXmbdr167YvHk zWrZsiXfffRe7du1C586dkZ6ejgMHDqBOnTplXW0i\noj+UMp8impiYiICAAOXHplNSUpRLRrRs2RL37t1TpnV3dwdQcB7znTt30KVLF7i7 u2P48OGYNGkS\nsrOzi32Mx8v7/eN2795duV/cxzoPHjxAy5YtlWVcuHABANCxY0cGABHRE8ocAh07dsShQ4eU+25u\nbsolI1JTU1GvXj1 l3OOgAAoOROfm5irv3hs1aoT169ejRo0aymmAjxX3At+xY0fExMQo9y0WS5F5\n69ati9TUVADWy1eUtDwiIjUrcwj07dsXTZs2hZeXF7p3 7w5nZ2c4ODjA19cXw4YNQ3h4eInzJiUl\nwc/PDwaDAfv378df//pXdOrUCZcvX8bgwYORkJBQ4rxjx47F9evX4evri+7du+PcuXNF5l26d CmG\nDRsGX19faDQaDBgwoKyrSUT0h1Zlzg6qSnjQy4q9sGIvrNgLq+p+YJiXjSAiUjGGABGRijEEiIhU\njCFARKRiDAEiIhUr9RvDWq3W Ymdnp7qg0Gq1hb7boGbshRV7YcVeWGm1Wktl1/AieIpoMXj6mxV7\nYcVeWLEXVjxFlIiIqi2GABGRijEEiIhUjCFARKRiDAEiIhVjCBARq RhDgIhIxRgCREQqxhAgIlKx\ncgkBV1fXZ572/v37WLduXbHjEhMT4enpiaCgoPIoq0pKTk6GRqNBbGxsoeEfffQRdDoddDodFi5c\nWGjc 3bt3Ub9+fURGRgIADh06BB8fH+j1egQEBCAjI6PC6i9PJfXiseDgYPTo0QNAQQ8MBoNy02g0\nuHfvHvbt2wedTge9Xo++ffvizp07FbkKV M4CAwPRqFEjzJ8/v8i4xYsXK8+/i4sLPvnkEwDA1KlT\nodfr4enpialTpwIArl69Cr1eDz8/P/j4+ODkyZMVuh7VioiUeCsY/XStWrV6pu ny8/MlLS1NjEZj\nseO//PJLWb16dZHhZrP5mZZfXp51vcti+PDhYjQa5ciRI4WGJycni0hBj3Q6naSkpCjjpkyZIv36\n9ZP169eLiEhub q4y7l//+pdMmTLFZvVWRi9ERM6ePSsDBgwodls5fvy4BAYGiojIlStX5NGjRyIi\n8s0338isWbNsVq8te1Hd2KoXGRkZEhERIaGhoaVO16</p>
<p>dPHzl27JiIFP5/8Pf3l8TERLl//75kZmaK\niMj58+fF19fXJvWKKL0o9bW0Kt9KvYBcSSwWC0aOHImMjAy8/vrryvCDBw/iiy++gNlsRv3 69bFp\n0yZotVq4urpiyJAhOHbsGNzc3HDq1CkYDAZMnToV/fr1AwCcOnUK33//PZycnHD58mW4urpi9+7d\nMJlM8Pf3h7e3NyZPngx7e3 t06tQJy5cvh8ViwYgRI3Dt2jV4eXlhy5YtSElJecFYtJ3jx4+jSZMm\nxf7gvZubGwDA3t4ejo6OyjQ///wzbty4ga5duyrT1qhRQ/k7Ozs bnTt3tnHl5a+0XgBAaGgoZsyY\ngZkzZxYZFxkZieHDhwMAmjVrpgyvWbMmHB3LtElTFfHqq68+dZpbt24hLS0NOp0OgPX/wWQyoVat\nWm jatCnq1q2rTM/tonRl+jhox44dcHZ2xqFDhzB48GCYzWYAgKenJw4ePIgjR46gbdu22Lx5MwDA\nbDajf/8rjkaKAAAMPklEQVT+OHjwIGb MmAF3d3fExMQoAQAA7u7uGDVqFGbOnKnsCj58+BDbt2/H\n5MmTERISgsjISMTGxiI3Nxe7du3Cjh07UKdOHRw6dAj9+/dX6qiqwsLCMH36 9FKn2bBhA1q2bIkW\nLVoAAObNm1fsC+Hu3bvRtWtXLF++HF5eXrYo16ZK60VMTAxat26Nxo0bFxlnNpsRFRWFQYMGFRqe\nmZmJZcuW4f3 337dJvVR1bNy4EUOGDCk07MMPP0TLli3RpEmTQgGQn5+PiRMnFvs/RAXKFALJycnw\n9PQEAHTr1k25pOz58+fRq1cv6PV67NixQ/ms2sHB QUnt56HT6ZRlP3jwAC1btgQAeHt748KFC7h0\n6RI8PDyK1FEVPX7RbtCgQYnT/Pjjj4iIiMB3330HAEhISICdnR3atWtXZNp+/frh5MmTm D9/PmbM\nmGGzum3hab1YuHCh8tnu7+3fvx9eXl6oVauWMiw7OxuDBw/Gd999h5dfftkmNVe2ZcuWwWAwoEeP\nHsrn4g8fPqzssirFhg0b lD3Bx8LDw5GWloasrCzs3btXGT5+/Hj06dNHObZERZVpH8nNzQ3/8z//\ngzFjxuDEiRPKJWXDwsIwb948eHl5Ydq0acpwOzs75QW6Ro0az<br>/yO/cmPCurWrYvU1FS0bNkScXFx\nGDhwIMxmM3788ccidVRFZ86cQUxMDOLi4pCQkIALFy5g06ZNaN68OYCCj0dmz56N6OhoODk5ASj4\n iOzixYvo3bs3UlJS4OzsjNatW6Nz587QarUAgHr16uGll16qtPUqi9J68csvv+DmzZsYOnQocnJy\ncP78eYSFhSnv5CIjIzFixAhlWTk5O XjjjTcwc+ZMdOvWrbJWyeZCQkIQEhJS2WVUuuTkZNjZ2Skf\nnwLAo0ePoNVq4ejoCGdnZ+X/YcqUKXjllVfYt6cp7YABSjj4Yzab5Z133h F/f3+ZOnWqcmD4hx9+\nkHbt2smgQYMkODhYObjz5IHj/Px86d27t7z55pvy448/FlrunDlzlIOfvz84dPToUdHpdOLj4yN/\n+9vfxGKxi Nlslrffflv8/f3lk08+kdatWxdb7/Mqab3LS3BwsBw5ckSio6Nl3bp1IiLSoUMH6dCh\ng+j1etHr9XLy5MlC8zzZm5UrV4q/v78YDAYJDA yU9PR0m9VaGb147PcnEfzyyy/i4uIiJpNJGfbV\nV19JgwYNlL7Nnz/fZrXauhfVia16MXbsWGnfvr20atVKBg4cKKdPn5ZFixYp42fPni1 Lly4tNM+b\nb74per1evL295dNPPxURkRMnToijo6OyXQwePNgm9YpU/wPD1f5HZUwmEzQaDY4ePYoFCxYgKirq\nhZfJH8ywYi+s2Asr9s Kquv+oTLU/ZD506FBkZWUhNzcX33//fWWXQ0RUrVT7PQFb4LscK/bCir2w\nYi+sqvueAC8bQUSkYgwBIiIVYwgQEakYQ4CISMUYAkREKsY QICJSMYYAEZGKMQSIiFSMIUBEpGKl\nXjZCq9Va7OzsVBcUWq22Sl+WuiKxF1bshRV7YaXVai2VXcOL4GUjisGvxFuxF1bshRV7YcXLRhAR<br>\nUbXFECAiUjGGABGRijEEiIhUjCFARKRiDAEiIhVjCBARqRhDgIhIxRgCREQqVq4hMGrUKMTGxgIA\nXF1dAQB79+7F+vXrn3tZMTExOHf uXHmWVyUkJydDo9EofXps+/btaNeuHbRarTIsJycHPXv2hK+v\nL3Q6HaKjo5VleHt7w2AwwMfHB2fPnq3QdSgv7EWBwMBANGrUCPPnzy8y bvHixTAYDDAYDHBxccEn\nn3wCAJg6dSr0ej08PT0xdepUAMDVq1eh1+vh5+cHHx8fnDx5skLXg6opESnxVjD62QUHB8uRI0dE\nRKRVq1b PNe/vzZkzR9avX//M05vN5hd6vCc973o/j+HDh4vRaFT69FhWVpbk5OQU6lteXp6kpaWJ\niMjt27eldevWIiJiMpnEYrGIiMiBAwdk8ODB NquXvbCyVS8yMjIkIiJCQkNDS52uT58+cuzYMRER\nyc3NVYb7+/tLYmKi3L9/XzIzM0VE5Pz58+Lr62uTekVsu11UN//pRamvpVX5VuY9g aysLBiNRuUd\nWHJycrHTrVmzRnmHs2nTJvzlL39BUFAQAgMDERMTA6DgnZDBYICnpyeOHTuGu3fvYs2aNQgLC4PB\nYEB+fj5WrlyJbt26 oVu3bli9erWy7LfeeguDBg3CkiVLyroqFeb48eNo0qQJXn311SLjGjRoUOid\nLwBoNBq0aNECAODk5AR7+4Kny9HRUbl4V3Z2Njp37mzbw m2AvbAqrge/d+vWLaSlpUGn0wEAatSo\nAQAwmUyoVasWmjZtirp16+Lll18GANSsWROOjqVeH5IIwFOuIlqaunXrIjo6GjVq1EB0dDQWLl xY\n6vT5+fmYPXs2Tp06Ba1Wi9dee00Zt23bNjg7O+P//u//MGHCBPz0008YNWoUXF1dMXz4cNy+fRvL\nli3DiRMnAAAeHh7o378/AODhw 4fYs2dPtbiiYVhYGCIiIpRd+ufx8ccfY9q0acr9U6dOISQkBD//\n/DO2bdtWnmVWCPbi+WzcuBFDhgwpNOzDDz/Ef//3f6NXr16oW7euMj w/Px8TJ07EzJkzK7pMqobK\nHAL379/HhAkTcPPmTeTl5aF27dr485//XOL0WVlZaNy4MWrXrg0A6NKlC4CCz3onTZqEixcvwsHB\nAdeuX Ssyb2pqKjp16qS8++nUqRPS0tIAADqdrloEwO7du9G1a1c0aNDguecNDQ1FnTp1MHr0aGWY\nu7s7jh07hvj4eISEhCA+Pr48y7Up9uL5bd iwAZGRkYWGhYeH45///CeCgoKwd+9e9O3bFwAwfvx4\n9OnTBz169KiMUm1u2bJl2LJlCxwdHWE2mwEAUVFRqFWrViVXVj2VOQQiIyPRpUs XfPbZZ9izZw8W\nL15c6vQNGzZEZmYmHj58CK1WizNnzgAoOHDs4OCAI0eOICkpCQMGDABQsLv7+Al2cXHBuXPnkJeX\nBwBISEiAi4sLkp KS4ODgUNZVqFBnzpxBTEwM4uLikJCQgAsXLmDTpk1o3rx5qfMtW7YMly5dwtq1\na5Vhjx49Uj4uqVevHl566SWb1l7e2Ivnk5ycDDs7O7i 5uSnDHq+3o6MjnJ2dlfWeMmUKXnnlFYSE\nhFRWuTYXEhLyh16/ClfaAQOUcvAnMTFROnfuLL1795ZPPvlEjEZjsQeGnzzgtWHDBvnLX/4i gwYN\nkoCAADl69KjcuHFDPDw8xGg0yueff67MFx8fL97e3hIUFCT5+fny7bffioeHh3h4eMiKFSuKLLs8\nlbbe5eFxn6Kjo2XdunUiInL 48GExGo3i5OQkRqNRtm7dKpmZmWJvby8+Pj6i1+tFr9eL2WyWqKgo\n8fPzE4PBIAaDQU6fPm2zWtkLK1v1YuzYsdK+fXtp1aqVDBw4UE6f Pi2LFi1Sxs+ePVuWLl1aaJ43\n33xT9Hq9eHt7y6effioiIidOnBBHR0elP9XxIHl1hGp+YLhCf1TGZDJBo9HAZDLB3d0d+/fvR5Mm\nTcp t+eWFP5hhxV5YsRdW7IVVdf9RmQo9fWDNmjXYsGEDsrOzMXLkyCoZAEREasKflywG3+VYsRdW\n7IUVe2FV3fcEeNkIIiIVYwgQEakYQ4CI SMUYAkREKsYQICJSMYYAEZGKMQSIiFSMIUBEpGIMASIi\nFSv1shFarTbTzs6ucUUVU1VotVqLnZ0dAxLsxZPYCyv2wkqr1WZWdg0votTLR hAR0R8bk5yISMUY\nAkREKsYQICJSMYYAEZGKMQSIiFSMIUBEpGIMASIiFWMIEBGpGEOAiEjFGAJERCrGECAiUjGGABGR\nijEEiIhUjCFA<br>RKRiDAEiIhVjCBARqRhDgIhIxRgCREQqxhAgIlIxhgARkYoxBIiIVIwhQESkYgwB\nIiIVYwgQEakYQ4CISMUYAkREKsYQICJSMYYAEZGKM QSIiFSMIUBEpGIMASIiFWMIEBGpGEOAiEjF\nGAJERCrGECAiUjGGABGRijEEiIhUjCFARKRiDAEiIhVjCBARqRhDgIhIxRgCREQqxhAgIl IxhgAR\nkYoxBIiIVIwhQESkYgwBIiIVYwgQEakYQ4CISMUYAkREKsYQICJSMYYAEZGKMQSIiFSMIUBEpGIM\nASIiFWMIEBGp2P8DKxIvq vD7gzwAAAAASUVORK5CYII=\n”,<br>      “text/plain”: [<br>       “<matplotlib.figure.figure at="" 0x105ee4588="">“<br>      ]<br>     },<br>     “metadata”: {},<br>     “output_type”: “display_data”<br>    }<br>   ],<br>   “source”: [<br>    “alligator = Animal(‘alligator’, [1,1,0,1,4])\n”,<br>    “animals.append(alligator)\n”,<br>    “compareAnimals(animals, 3)”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 8,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “class Example:\n”, </matplotlib.figure.figure></p>
<pre><code>&quot;\n&quot;, 
&quot;   def   init  (self, name, features, label = None):\n&quot;,
&quot;       self.name, self.features, self.label = name, features, label\n&quot;, 
&quot;\n&quot;, 
&quot;   def dimensionality(self):\n&quot;,
&quot;       return len(self.features)\n&quot;,
&quot;\n&quot;, 
&quot;   def distance(self, other):\n&quot;, 
&quot;       return minkowskiDist(self.features, other.features, 2)\n&quot;, 
&quot;   \n&quot;, 
&quot;    def   str (self):\n&quot;, 
&quot;       return self.name +&apos;:&apos;+ str(self.features) + &apos;:&apos; + str(self.label)&quot; 
</code></pre><p>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 9,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “class Cluster:\n”,<br>    “   \n”,<br>    “   def   init  (self, examples):\n”,<br>    “      \”\”\”Assumes examples is a list of example of type Example\”\”\”\n”,<br>    “       self.examples = examples\n”,<br>    “       self.centroid = self.computeCentroid()\n”,<br>    “       \n”,<br>    “   def update(self, examples):\n”,<br>    “       \”\”\”Replace the examples in the cluster by new examples\n”,<br>    “          Return how much the centroid has changed\”\”\”\n”,<br>    “       oldCentroid = self.centroid\n”,<br>    “       self.examples = examples\n”,<br>    “       if len(examples) &gt; 0:\n”,<br>    “           self.centroid = self.computeCentroid()\n”,<br>    “           return oldCentroid.distance(self.centroid)\n”,<br>    “       else:\n”,<br>    “           return 0.0\n”,<br>    “       \n”,<br>    “   def computeCentroid(self):\n”,<br>    “       dim = self.examples[0].dimensionality()\n”,<br>    “       totVals = [0.0] <em> dim\n”,<br>    “       for e in self.examples:\n”,<br>    “           totVals = [totVals[i] + e.features[i] for i in range(dim)]\n”,<br>    “       totAvg = [v / len(self.examples) for v in totVals]\n”,<br>    “       return Example(‘centroid’, totAvg)\n”,<br>    “   \n”,<br>    “    def variance(self):\n”,<br>    “      return sum((e.distance(self.centroid)) <em>* 2 for e in self.examples) \\n”,<br>    “              </em></em> 0.5\n”,<br>    “   \n”,<br>    “    def   str (self):\n”,<br>    “       names = [e.name for e in self.examples]\n”,<br>    “       names.sort()\n”,<br>    “       result = ‘Cluster with centroid ‘\\n”,<br>    “                + str(self.centroid.features) + ‘ contains:\n ‘\n”,<br>    “        for e in names:\n”,<br>    “           result = result + e + ‘, ‘\n”,<br>    “       return result[:-2]”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 10,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [], </p>
<p>   “source”: [<br>    “def kmeans(examples, k, verbose):\n”,<br>    “   \”\”\”Assumes examples is a list of examples of type Example,\n”,<br>    “        k is a positive int, verbose is a Boolean\n”,<br>    “      Returns a list containing k clusters. If verbose is\n”,<br>    “        True it prints result of each iteration of k-means\”\”\”\n”,<br>    “   # Get k randomly chosen initial centroids\n”,<br>    “   initialCentroids = random.sample(examples, k)\n”,<br>    “   \n”,<br>    “   # Create a singleton cluster for each centroid\n”,<br>    “   clusters = [Cluster([e]) for e in initialCentroids]\n”,<br>    “       \n”,<br>    “   # Iterate until centroids do not change\n”,<br>    “   converged, numIterations = False, 0\n”,<br>    “    while not converged:\n”,<br>    “       numIterations += 1\n”,<br>    “       #Create a list containing k distinct empty lists\n”,<br>    “       newClusters = [[] for i in range(k)]\n”,<br>    “\n”,<br>    “       # Associate each example with closest centroid\n”,<br>    “        for e in examples:\n”,<br>    “           # Find the centroid closest to e\n”,<br>    “           minDist, minInd = e.distance(clusters[0].centroid), 0\n”,<br>    “           for i in range(1, k):\n”,<br>    “               d = e.distance(clusters[i].centroid)\n”,<br>    “               if d &lt; minDist: minDist, minInd = d, i\n”,<br>    “           #Add e to the list of examples for the appropriate cluster\n”,<br>    “          newClusters[minInd].append(e)\n”,<br>    “           \n”,<br>    “       # Update each cluster; check if a centroid has changed\n”,<br>    “       converged = True\n”,<br>    “       for i in range(len(clusters)):\n”,<br>    “           if clusters[i].update(newClusters[i]) &gt; 0.0:\n”,<br>    “               converged = False\n”,<br>    “        if verbose:\n”,<br>    “           print(‘Iteration #’ + str(numIterations))\n”,<br>    “           for c in clusters: print(c)\n”,<br>    “           print() #add blank line\n”,<br>    “    return clusters”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 11,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def dissimilarity(clusters):\n”,<br>    “   return sum(c.variance() for c in clusters)”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 12,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def trykmeans(examples, numClusters, numTrials, verbose = False):\n”,<br>    “   \”\”\”Calls kmeans numTrials times and returns the result with \n”,<br>    “   the lowest dissimilarity\”\”\”\n”,<br>    “   bestClusters = kmeans(examples, numClusters, verbose)\n”,<br>    “   minDis = dissimilarity(bestClusters)\n”,<br>    “   for trial in range(1, numTrials):\n”,<br>    “       currClusters = kmeans(examples, numClusters, verbose)\n”,<br>    “       currDis = dissimilarity(bestClusters)\n”,</p>
<pre><code>&quot;       if currDis &lt; minDis:\n&quot;, 
&quot;           bestClusters, minDis = currClusters, currDis\n&quot;, 
&quot;    return bestClusters&quot; 
</code></pre><p>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 13,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def genDistribution(xMean, xSD, yMean, ySD, n, namePrefix):\n”,<br>    “    samples = []\n”,<br>    “    for s in range(n):\n”,<br>    “       x = random.gauss(xMean, xSD)\n”,<br>    “       y = random.gauss(yMean, ySD)\n”,<br>    “       samples.append(Example(namePrefix + str(s), [x, y]))\n”,<br>    “    return samples”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 14,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def plotSamples(samples, marker):\n”,<br>    “    xVals, yVals = [], []\n”,<br>    “    for s in samples:\n”,<br>    “       x, y = s.features[0], s.features[1]\n”,<br>    “      pylab.annotate(s.name, xy = (x, y), xytext = (x + 0.13, y - 0.07),\n”,<br>    “                      fontsize = ‘x-large’)\n”,<br>    “       xVals.append(x); yVals.append(y)\n”,<br>    “   pylab.plot(xVals, yVals, marker)”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 15,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def contrivedTest(numTrials, k, verbose):\n”,<br>    “   random.seed(0)\n”,<br>    “    xMean, xSD = 3, 1\n”,<br>    “    yMean, ySD = 5, 1\n”,<br>    “    n = 10\n”,<br>    “   d1Samples = genDistribution(xMean, xSD, yMean, ySD, n, ‘1.’)\n”,<br>    “   plotSamples(d1Samples, ‘b^’)\n”,<br>    “   d2Samples = genDistribution(xMean + 3, xSD, yMean + 1, ySD, n, ‘2.’)\n”,<br>    “   plotSamples(d2Samples, ‘ro’)\n”,<br>    “   clusters = trykmeans(d1Samples + d2Samples, k, numTrials, verbose)\n”,<br>    “   print(‘Final result’)\n”,<br>    “   for c in clusters: print(c)”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 16,<br>   “metadata”: {<br>    “collapsed”: false<br>   },<br>   “outputs”: [ </p>
<pre><code>{ 
 &quot;name&quot;: &quot;stdout&quot;,
 &quot;output_type&quot;: &quot;stream&quot;, 
 &quot;text&quot;: [
  &quot;Iteration #1\n&quot;, 
  &quot;Cluster with centroid [4.404457264904678, 4.147223255066026] contains:\n&quot;, 
  &quot; 1.0, 1.2, 1.3, 1.5, 1.7, 1.8, 1.9, 2.4, 2.9\n&quot;,
  &quot;Cluster with centroid [4.648941761955665, 6.1360349613049285] contains:\n&quot;,
  &quot; 1.1, 1.4, 1.6, 2.0, 2.1, 2.2, 2.3, 2.5, 2.6, 2.7, 2.8\n&quot;,
  &quot;\n&quot;, 
  &quot;Iteration #2\n&quot;, 
  &quot;Cluster with centroid [3.9683057792367564, 4.353581873118546] contains:\n&quot;,
  &quot; 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.7, 1.8, 1.9, 2.4, 2.9\n&quot;,
  &quot;Cluster with centroid [5.236345688227788, 6.325777029516049] contains:\n&quot;, 
  &quot; 1.6, 2.0, 2.1, 2.2, 2.3, 2.5, 2.6, 2.7, 2.8\n&quot;,
  &quot;\n&quot;, 
  &quot;Iteration #3\n&quot;, 
  &quot;Cluster with centroid [3.1945284772787463, 4.285413840258588] contains:\n&quot;,
  &quot; 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.7, 1.8, 1.9\n&quot;,
  &quot;Cluster with centroid [5.638883497285972, 6.022969937056468] contains:\n&quot;, 
  &quot; 1.6, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9\n&quot;,
  &quot;\n&quot;, 
  &quot;Iteration #4\n&quot;, 
  &quot;Cluster with centroid [3.1417088311713046, 4.521439632290996] contains:\n&quot;,
  &quot; 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9\n&quot;, 
  &quot;Cluster with centroid [5.936138645394136, 5.960699754703848] contains:\n&quot;, 
  &quot; 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9\n&quot;, 
  &quot;\n&quot;, 
  &quot;Iteration #5\n&quot;, 
  &quot;Cluster with centroid [3.1417088311713046, 4.521439632290996] contains:\n&quot;,
  &quot; 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9\n&quot;, 
  &quot;Cluster with centroid [5.936138645394136, 5.960699754703848] contains:\n&quot;, 
  &quot; 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9\n&quot;, 
  &quot;\n&quot;, 
  &quot;Final result\n&quot;, 
  &quot;Cluster with centroid [3.1417088311713046, 4.521439632290996] contains:\n&quot;,
  &quot; 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9\n&quot;, 
  &quot;Cluster with centroid [5.936138645394136, 5.960699754703848] contains:\n&quot;, 
  &quot; 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9\n&quot;
 ]
},
{ 
 &quot;data&quot;: {
  &quot;image/png&quot;: &quot;iVBORw0KGgoAAAANSUhEUgAAAXgAAAD8CAYAAAB9y7/cAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFU
</code></pre><p>eJzt3Xt0VdW59/HvDNeEKMEIcomQoygI1JM0sQcjB1TgLQbK\npdDqKXRwGTlQ5Vg8dqh9K6IWgQ5CFVvhLQ4pcUiU0Soc0SI3hSKXVpKQI 1ikolwEE8UqoQEDSJ73\nj4RIIMlee2dfsnd+nzHWCHtlzb2ehfLsueea65nOzBARkdgTF+kAREQkNJTgRURilBK8iEiMUoIX\nEYlRSvAi IjFKCV5EJEYpwYuIxCgleBGRGOUpwTvn/ts5955zbo9z7iXnXNtQByYiIo3jfD3J6pzr\nBmwF+pjZV865PwBrzCyvvjZXXnmlpaamBjNOE ZGYVlhY+LmZdQzme7b047h459xZIAH4pKGDU1NT\nKSgoaGxsIiLNhnPuULDf0+cQjZkdBRYAh4ESoMzM1tcR3FTnXIFzruDYsWPBjlNERP zkM8E75zoA\no4B/AboC7ZxzEy4+zsyeNbNMM8vs2DGo3zJE5CK5ubncfPPNdOjQgaSkJAYMGMDatWs9td2yZQu3\n3347iYmJJCYmctNNN 3HgwIEQRyyR4OUm6xDggJkdM7OzwEogK7RhiUhD3nrrLaZMmcKmTZt45513\nyMrKYsSIEWzbtq3BdmvXruWOO+7g1ltvZfv27RQXFzNr1i wSEhLCFLmEk5ebrP8G/B64CfgKyAMK\nzOy39bXJzMw0jcGLhNeNN97I0KFD+fWvf13n7ysrK+nZsyd33nkn8+bNC3N04otzrtDMMoP5nl7 G\n4P8KvAwUAbur2zwbzCBEpHEqKys5ceIE7dq1q/eYoqIiDhw4QEpKCgMHDqRTp07079+fVatWhTFS\nCSdP8+DN7FEz621m/czsx2Z2Ot SBiTRb+fmQmgpxcVU/8/N9Npk7dy7Hjx9n6tSp9R7z4YcfAjBz\n5kwmTJjA+vXrGTFiBGPHjmXDhg1BCl6aEq/TJEUkHPLzYepUOHWq6vW hQ1WvAcaPr7PJ4sWLmTt3\nLqtXryYlJaXet66srAQgJyen5oMgLS2Nv/zlL/z2t79l6NChwbsOaRJUqkCkKXn44W+S+3mnTlXt\nr8OCBQ t44IEHWL16NUOGDGnwrbt06QJA3759a+3v27cvhw4FfQq2NAHqwYs0JYcPe94/a9Ysnnrq\nKdasWcOgQYN8vnVmZibx8fG8//77tfbv27c PPXkem9SDF2lKunf3tP++++4jNzeXF154gV69elFa\nWkppaSllZWU1x6xatYrevXtz9OhRABITE7n33ntZtGgRL774Ivv372fhwoW89tpr zJgxI2SXJJGj\nHrxIUzJnTu0xeICEhKr9F3j66acBGDNmTK39EydOJC8vD4CysjL27dvH2bNna34/d+5c2rRpw4MP\nPsiXX37JDTfcwKp Vq7j99ttDcz0SUT7nwQdC8+BFGiE/v2rM/fDhqp77nDn13mCV2BGKefDqwYs0\nNePHK6FLUGgMXkQkRinBi4RQoEXBzp49y4MPPkiXLl2I j49nwIABFBYWhiFiiSVK8CIhFGhRsAce\neIClS5eyZMkSdu7cyTXXXMOQIUMoLS0NU+QSC3STVSTMfBUFO3HiBJ06deI3v/lNzROn586do 1u3\nbvzkJz/hscceC2O0Ei4RKTYmIsHjpShYYWEhp0+fZtiwYTX7WrRowdChQ9m6dWs4wpQYoQQvEqgQ\nFQUrKSkBoHPnzrX2d+7cueZ3 Il5omqRIIEJYFEwkWNSDFwlEGIqCXXxD9dNPP635nYgXSvAigfCz\nKNjjjz/OmjVrfCZ3gIyMDNq0acO6detq9lVWVrJx40YGDBgQcMjS/ CjBiwQihEXBLr/8cn7yk5/w\ni1/8gtdff5333nuPKVOm8NVXXzFt2rSQXZLEHo3BiwQixEXBcnNzad26NTk5ORw/fpyMjAw2bNig\nIRrx i+bBiwRKRcEkiFRsTKQpUVEwaeI0Bi8iEqOU4EVEYpQSvIhIjFKCFxGJUUrwIiIxSgleRCRG\nKcGLiMQoJXgRkRilBC8iEqOU4EVEYpQSv IhIjFKCFxGJUT4TvHOul3Ou+ILthHPuvnAEJyIigfNZ\nTdLM9gFpAM65FsBRYFWI4xIRkUbyd4hmMPChmR0KRTAiIhI8/ib4u4CX6vqFc2 6qc67AOVdw7Nix\nxkcmIiKN4jnBO+daAyOBP9b1ezN71swyzSyzY8eOwYpPREQC5E8P/g6gyMw+DVUwIiISPP4k+P+g\nnuEZERFpejwle OdcO2AosDK04YiISLB4WnTbzE4CySGORUREgkhPsoqIxCgleBGRGKUEHwZbtmxh\n1KhR9OjRA+ccTzzxhOd2t99+O4mJiSQmJnLTTTdx4M CBEEcrIrFCCT4MysvL6dOnD/Pnz6dz586e\n2qxdu5Y77riDW2+9le3bt1NcXMysWbNISEgIcbQiEiucmQX9TTMzM62goCDo7xsLUlNTycn JYebM\nmfUeU1lZSc+ePbnzzjuZN29eGKMTkUhxzhWaWWYw31M9+CaoqKiIAwcOkJKSwsCBA+nUqRP9+/dn\n1SrVeBMR75TgG6mkBAYNgt</p>
<p>LS4L3nhx9+CMDMmTOZMGEC69evZ8SIEYwdO5YNGzYE70TNRG5uLjff\nfDMdOnQgKSmJAQMGsHbtWp/tJkyYwLXXXkt8fDzJyckMHTqUHTt 2hCFikeBQgm+k2bNh69aqn8FS\nWVkJQE5ODlOnTiUtLY2ZM2eSnZ3Nb3/72+CdqJl46623mDJlCps2beKdd94hKyuLESNGsG3btgbb\n9e<br>/fn7y8PPbu3cumTZtISUlh6NChHD16NEyRizSOpwedpG4lJbBsGVRWVv185BHweA+1QV26dAGg\nb9++tfb37dvXU89TanvjjTdqvZ4/fz5 r165l5cqV3HLLLfW2+6//+q9arxcuXEheXh4FBQV069Yt\nJLGKBJN68I0we3ZVcgc4dy54vfjMzEzi4+N5//33a+3ft28fqampwTlJM1ZZ WcmJEydo166d5zYV\nFRUsXry4ZrqqSDRQgg/Q+d77mTNVr8+cqXpd11h8eXk5xcXFFBcXc+bMGUpLSykuLmb//v0ArFq1\nit69e9d89U9 MTOTee+9l0aJFvPjii+zfv5+FCxfy2muvMWPGjHBdYnTIz4fUVIiLq/qZn++zydy5\nczl+/DhTp071eez5pJ6QkMDixYt588036dq1a+Pj FgkHMwv6lpGRYbHu7rvNWrc2g2+21q3N7rnn\n0mM3bdpkwCXboEGDzMxs2bJlBtiBAwdq2nz99df2yCOPWLdu3SwhIcEyMjLs1VdfDc/FR Yvly80S\nEmr/R0hIqNpfj0WLFll8fLxt2LDB0ymOHz9uH3zwgW3bts0mTpxoV199tR06dChYVyBSAyiwIOdi\nzYMPUHo6FBdfuj8tDXbt Cn88zVJqKhyqY/XIHj3g4MFLdi9YsIBHH32UV199lSFDhgR0yt69ezN6\n9Gh+9atfBdRepD6hmAevm6wBUhJvAg4f9rx/1qxZPPXUU6xZs 4ZBgwYFfMrKykoqKioCbi8SThqD\nl+jVvbun/ffddx+5ubm88MIL9OrVi9LSUkpLSykrK6s55uL7IHv27CE3N5fCwkIOHz7Mzp07mTJl\n CgcOHGD8+PEhuySRYFKCl+g1Zw5cXJsnIaFq/wWefvppKioqGDNmDF26dKnZLrxhXVZWxr59+zh7\n9iwAbdu25c033yQ7O5uePXsyevRov vjiC95++23NopGooTF4iW75+fDww1XDMt27VyV39bAlCqkW\njUSVQEsEpKam4pyrtQ0YMKDug8ePr7qhWllZ9VPJXaSGEryETKAlAgAeeu ghSkpKarbVq1eHIWKR\n2KJZNBIygZYIgKqHvbzWzheRuqkHL2HjT4mAZ555huTkZPr27ctPf/pT/vGPf4QhQpHYogQvgQlh\niYB7772X5 cuXs3nzZh577DHWrVtHVlYWX331VXBiF2kugv1orDWTUgXNWhhKBFzoww8/NOec5efn\nNyZqkSaNEJQqUA9e/Pfww3DqVO19p05V7a/Dgg ULeOCBB1i9enVAJQKuueYarrrqKg7WUX5AROqn\nm6zivzCXCDh69CifffYZV199dUDtRZor9eDFfyEsEbBjxw4WLFhAUVERhw4dYt26dYw YMYLu3bsz\nZsyYkF1SuAXyjMDhw4eZNm0a1113HfHx8aSkpDB58mStMCX1UoIX/4WwRECbNm1YuXIlQ4YM4frr\nr+eee+6hf//+7Nixg8 TExJBfWrgE8ozAvn37OHnyJAsXLmTPnj2sWLGC9957j2HDhnHu3LkwRi/R\nQqUKJDAqERB0N954I0OHDuXXv/615zZFRUVkZGTw7rvv8q1 vfSuE0UmoqVywNB3jxyuhB1EgywgC\nHD9+HICEi79RiaAhGpHgC/EygueVl5dz//33M3bsWK699trA45WYpR68SDDl58PUqd9MIz10qOo1<br>\n1PuNZ/HixcydO5fVq1eTkpLi6TQnT55k5MiRtGzZkqVLlwYjcolB6sGLBFOInxHIzc3lO9/5Du3b\nt2fLli20bNmSHTt2NNhm8+bNl1T nPL/l5uZ6vjSJPp4SvHMuyTn3snPufefcXufczaEOTCQq+fmM\nwOOPP86aNWs8PwC2du1aSktL6devH++88w4DBw70OfsmKyurVmXOkpIS nnzySeLi4vjhD3/o6bwS\nnbz24J8G1ppZb+Bfgb2hC0kkioXwGYHzybljx4688sordO3alfvvv5/rr7+eP/7xj/WG1Lp1azp3\n7lxre/n llxk2bBg9evRo/DVLk+VzDN451x4YCEwCMLMzwJnQhiUSpebMqT0GD/U+IwBc8vDWxIkT\nycvLAy59RmDdunXs3VvVt+rZs2etdpmZ3mfX 7d69m+3bt/Pqq696biPRyUsP/l+AY8Ay59wu59xz\nzrlL5nI556Y65wqccwXHjh0LeqAiUWH8eHj2WejRA5yr+vnss5fcYK2zONTy5eRt3 lwz+2ZSq1aY\nGampqQBMmjTpkjazZ8+mffv2zJ0713OIS5YsoVu3bgwfPjyIFy5Nkq9qZEAm8DXwb9WvnwZmN9RG\n1SRF/BSmCp0nT560 9u3b26OPPhqEoCWYiFA1ySPAETP7a/Xrl4FvB/+jRqQZC1OFzpdeeony8nJy\ncnIaE61ECZ9j8GZW6pz72DnXy8z2AYOBv4U+NJFmJEwVO pcsWcLw4cM9z7eX6OZ1Fs29QL5z7l0g\nDfA+4CcivoVw9s15u3btYufOnUybNi3o4UvT5CnBm1mxmWWa2Y1mNtrMvgx1YCLNSggrdJ63ZM kS\nunfvzrBhw0J2GdK0qJqkSFOhCp3NmqpJisQyVeiUIFMtGhGRGKUELyISo5TgRURilBK8iEiMUoIX\nEYlRSvAiIjFKCV5EJEYpwYuIx CgleBGRGKUELyISo5TgRURilBK8iEiMUoL3YMuWLYwaNYoePXrg\nnOOJJ57w2WbOnDn8+7//O5dffjnOOY4cORKGSEVEvqEE70F5eTl9+v Rh/vz5dO7c2VOb06dPM3Lk\nSB6uZ8k1EZFQU7lgD7Kzs8nOzgbgoYce8tTml7/8JQCbN28OVVgiIg1q9j34khIYNAhKSyMdiYhI\ncDX7B D97NmzdWvVTRCSWNOsEX1ICy5ZBZWXVT/XiRSSWNOsEP3t2VXIHOHdOvXgRiS1RleADma54\noUmTJtW0O997P3Om6ndnzqgXLyKxJaoSfC DTFc/Ly8tj9+7ddO3aFajdez+vvl58eXk5xcXFFBcX\nc+bMGUpLSykuLmb//v0ArFq1it69e3P06NGaNocPH651zN/+9jeKi4v54osv/Ip bRCRgZhb0LSMj\nw0KtR48eNnv2bE/Hvvfee3bVVVfZ3//+95p2aWlmcOmWlnZp+02bNhlwyTZo0CAzM1u2bJkBduDA\ngZo2EydOrLPNsm XLGn/xIhJzgAILci6O+Xnwp06d4oc//CG5ublcd911Nft37fL+HrfeeitVf/91\nmzRpEpMmTaq1Ly8vj7y8PD+jFREJniY1RBOKOenTp0/ n29/+Nj/+8Y+D96YiEhG5ubncfPPNdOjQ\ngaSkJAYMGMDatWt9tmuupUOaVIIP9pz0/Px8tm3bxuLFi4PzhiISUW+99RZTpkxh06ZNvPPO O2Rl\nZTFixAi2bdvWYLtmWzok2GM+FuAY/CefmLVtWzUOHh9vVlLS8PFexuAnTpxozjlr0aJFzQZYXFyc\ntWnTxu8YRaTp+da3vmX333+<br>/p2PP30/7+OOPQxyV/wjBGHyT6cGHYk76nDlzePfdd2tmwBQXF9O1\na1emT59OYWFh408gEkaBDk989NFHjBs3jk6dOtGuXTvS09NZsWJF GCL2U34+pKZCXFzVz/x8n00q\nKys5ceIE7dq1C3l40ahJJHivc9L9na7YrVs3+vXrV2tr1aoVnTp1om/fvuG8RJFGC3R44nvf+x6f\nf/4 5b7zxBrt37+b73/8+P/rRj9i+fXuYIvcgPx+mToVDh6omtB06VPXaR5KfO3cux48fZ+rUqWEK\nNMoE+yuBBTBEc/fdZq1b156u2Lq12T33 1D4ukOmKF/NneqVIU+dreOLLL780wFavXl1r/xVXXGEL\nFy4MdXje9ehR97zlHj3qbbJo0SKLj4+3DRs2eD5NcxuiaRLTJHfs+Kb3ft6ZM 3BxByOQ6YoXO3jw\nYGBBijQxXoYnkpKS6NevH/n5+QwcOJDLLruMP/zhD5w6dYrBgweHMVofDh/2a/+CBQt49NFHWb16\nNUOGDAlhYNHN 0xCNc+6gc263c67YOVcQ7CB27arro9u/ueoN8bfEweHDh5k2bRrXXXcd8fHxpKSk\nMHny5FpPqooEVQDjz16HJzZu3EhJSQlJSUm0adOGa dOm8corr9CvX7/gxB4M3bt73j9r1iwef/xx\n1qxZo+Tugz9j8LeZWZqZZYYsmhDxt8TBvn37OHnyJAsXLmTPnj2sWLGC9957j2HDhnHu3L kwRCzN\nSgDjz4sXL2bu3Lm8/PLLpKSk1HucmTF9+nRatGjB5s2b2blzJzNmzOCuu+5qWhMN5syBhITa+xIS\nqvZf4L777iM3N5cXXniBX r16UVpaSmlpKWVlZTXHqHTIBbyM4wAHgSu9jvuEo1RBoAIdgy8sLDTA\n3n333RBEJc2an+PPubm5lpCQ4Gns+c033zTASi6ad3z77bfb+P HjgxB8EC1fXnXNzlX9XL78kkOo\n4x4cYBMnTqw5JlpLhxDBMXgD1jvnDFhiZs8G6wMmWhw/fhyAhIt7GSKN5cf486xZs3jqqadYs2YN\ng wYN8vnWJ0+eBKBFixa19rdo0aLB+1kRMX581dYALzGrdMg3vA7RDDCzbwN3ANOdcwMvPsA5N9U5\nV+CcKzh27FhQg2xIOJbcKy8v5/7772 fs2LFce+21oTuRNE8ex58DGZ7IysqiY8eOTJo0iaKiIvbv\n38/8+fPZuHEjY8aMCdklSdPgKcGb2dHqn58Bq4Dv1HHMs2aWaWaZHTt2DG6 UDQj1knsnT55k5MiR\ntGzZkqVLl4bmJNK8eRx/fvrpp6moqGDMmDF06dKlZpsxY0bNMWVlZezbt4+zZ88CkJyczPr16wH4\n7ne/S1paGi<br>+++CJLly5l3Lhxob0uiTjn6yuPc64dEGdm/6z+8wbgl2ZW7yN0mZmZVlAQ9Mk2lygp\ngWuugYoKiI+Hjz4CX/dQU1NTycnJYebMmT7fv6y sjOHDh3P27FnWrVtHUlJSkCIXuUh+Pjz8cNWw\nTPfuVcndx3CFxBbnXKEFeRKLlx78VcBW59z/Au8Af2oouYdTKJfc+/zzz7ntttsA2LBh g5K7hNb4\n8XDwYNX/0AcPKrlLUPhM8Gb2kZn9a/XW18zm+GoTDv4suedviYOSkhIGDhyIc47nn3+eU6dO1Yx3\nnrn4iSwRkSaqSdSiCYQ<br>/S+4VFBSQnp5Oeno6JSUlLFq0iPT0dHJycoBLxy3XrVvH3r17KSoqomfP\nnrXGO5tU/Q4RkQZEbYL3Wt4AvilxcPG2efNmoGpalZmRmppa 63Vd26233hrS6xKJVoFWu9y9ezfD\nhw8nOTmZyy67jNGjR6ukSJBEbYIPdXkDEfFPINUuS0tLue2227jiiit4++232bp1K+fOnWPIkCF8\ n9dVXYYw+9AL9ALyQcy7POWfOOd+zRKBpFBsTkej3xhtv1Ho9f/581q5dy8qVK7nlllvqbPP6669z\n+vRpfv/739OqVSsAnn/+eZKTk1mx YgWTJ08Oedzhcv4D8KabbiIhIYHnnnuOESNG8Oc//7nev58L\nOecmAd8CPvF6zqjtwYtI0+al2mVFRQWtWrWiZctv+ppt27YlLi6OLVu2h CPMsHnjjTf4z//8T9LS\n0rj++uuZP38+ffr0YeXKlT7bOuf6AL8C7gLOej2nEryI+BaiapeDBw+mvLycWbNmUVFRQXl5OT/7\n2c+orKzk k088d1SjktfVqJxzCcAfgAfM7AN/zqEELyINC2G1yxtuuIH8/HyWLVtGu3bt6NChAxUV\nFWRkZBAXF0XpKYTlnoFFQJGZveB3XMGuXmZNv JqkiPgphNUuL/Tpp5/a8ePHzcysU6dONn369EYG\nHibLl5slJNT+u0lIqLMa5nl1rUZFHdUkgfHA34HEC/YdBGZefGxdmxK8iDTMuboTvH OXHPrII49Y\nYmKibd68OeDTbdiwwQB76623GhN1+ATpA7CeBJ8HVAJfX7AZcA6ouPj4S9r7OiCQrTkk+D//+c82\ncuRI6969uwE+a8zXt 54sYPPnzw9T1CIB8JjAZsyYYW3btrVVq1ZZSUlJzXa+V25mtnLlSuvVq5cd\nOXKkZt8zzzxjO3futA8++MCWLVtmSUlJNmHChDBdXBAE6Q OwngTfDeh30XYU+A3Q9+LjL2nv64BA\ntuaQ4P/0pz/Zz3/+c1uxYoV17tzZZ4I/ffp0rf/pS0pK7Mknn7S4uDg7ePBgmKIWCYDHIYj6OjC<br>+\nFuOYPHmyXXnlldaqVSu77rrrbN68efb111+H6eKCIEgfgEABMAZ4H+hm9SVtDdGEV6CrRGVlZVl2\ndnYIIhIJMg+rLTVbQfoArE7wk6 r3p1oQErwedIqQ3bt3s337dl599dVIhyLim4fVlpqt838vPso9\nVyfnBplZHlXj7g0dk+o1tCiahxReoV4pasmSJXTr1o3hw4eH5gQiEj5 NtNyzEnw9QrlS1KlTp1i+\nfDk5OTmXrJUZS7Zs2cKoUaPo0aMHzjmeeOIJn21SU1NxztXaBgwYEIZoRWKPEnwdztear6ysv8Z8\nY7z00k uUl5fXlCuOVeXl5fTp04f58+fT2ddSWxd46KGHKCkpqdlWr14dwihFYpfG4OtQ10pRixYF\n7/2XLFnC8OHDG3zCLxZkZ2eTnZ0NVCVtrxI TE/36QBCRuqkHfxGvK0X5u0rUebt27WLnzp1MmzYt\nHJcTlZ555hmSk5Pp27cvP/3pT/nHP/4R6ZBEopIS/EW8rhTl7ypR5y1ZsoTu3bsz bNiwUF5GyIXq\nJvS9997L8uXL2bx5M4899hjr1q0jKysr5mqDi4SFl7mU/m7RPA8+La3uZxbS0iIdWdNy991mcXFm\n99zj7fhAnxX48MM PzTln+fn5frcViSbU8SRrYzf14C+ilaJ8C/VN6Atdc801XHXVVVrCTSQASvDi\nt7puQofK0aNH+eyzz7j66qtDdxKRGKUEHwMCmW8+YcIE rr32WuLj40lOTmbo0KHs2LHDZzuvN6HB\n/xvRO3bsYMGCBRQVFXHo0CHWrVvHiBEj6N69O2PGjPH+FyIigBJ8TAhkvnn//v3Jy8tj7969b</p>
<p>Nq0\niZSUFIYOHXrJrJ+Leb0JDf7fiG7Tpg0rV65kyJAhXH/99dxzzz3079+fHTt2kJiY6Om6ROQbzjzU\nR/BXZmamFRQUBP19xbfU1FRy cnKYOdPTous1ysrKSEpK4n/+538YNWpUvcelp0Nx8aX709J0n0Kk\nMZxzhWaWGcz31INOQkVFBYsXLyYxMZGbbrqpwWOVxEWih4ZomrhQF j07n9QTEhJYvHgxb775Jl27\ndg3+iUQkIpTgm7hQFj0bP348xcXFbN26lcGDBzNu3DgOHz4c/BOJSEQowTdhoZ5v3r59e3r27ElW\nVhZ5 eXk1PXkRiQ1K8E1YOOebA1RWVlJRURHak4hI2CjBN1GhnG++Z88ecnNzKSws5PDhw+zcuZMp\nU6Zw4MABxjeRhQpEpPGU4JuoUM43b9u2L W+++SbZ2dn07NmT0aNH88UXX/D222/7nEUjItHD8zx4\n51wLqhaFPWpmIxo6VvPgG0/zzUWal0jPg58B7AUuD2YAUjclcRFpLE9DNM65FG A48FxowxERkWDx\nOga/EHgQqPR1oIiINA0+E7xzbgTwmZkV+jhuqnOuwDlXcOzYsaAFKCIigfHSg78FGOmcOwisAG53\nzi2/+CAze9bMM s0ss2PHjkEOU0RE/OUzwZvZ/zWzFDNLBe4C3jKzCSGPTEREGkXz4EVEYpRf5YLN\nbDOwOSSRiIhIUKkHLyISo5TgRURilBK8iEiMUoIXEY lRSvASVFu2bGHUqFH06NED5xxPPPGEzzZn\nz57lwQcfpEuXLsTHxzNgwAAKCxt8rk5EPFCCl6AqLy+nT58+zJ8/n86dO3tq88ADD7B06VK WLFnC\nzp07ueaaaxgyZAiloViIVqQZUYKXoMrOzmbevHnceeedtGnTxufxJ06c4He/+x3z5s1j5MiR9OvX\nj2XLltGmTRt+97vfhSFikd ilBC8RVVhYyOnTpxk2bFjNvhYtWjB06FC2bt0awchEop8SvPilpAQG\nDQreAuAlJSUAlwzndO7cueZ3IhIYJXjxy+zZsHVr6BcAF5HGU4I Xz84vBF5ZWf8C4P7q0qULwCU3\nVD/99NOa30WzQGYVffTRR4wbN45OnTrRrl070tPTWbFiRRiilVijBC+eXbgQeH0LgPsrIyODNm3a\nsG 7dupp9lZWVbNy4kQEDBjT+BBEWyKyi733ve3z++ee88cYb7N69m+9///v86Ec/Yvv27SGOVmKO\nmQV9y8hift1YAAAIhUlEQVTIMIktn3x i1ratGXyzxceblZTUPu6f//yn7dq1y3bt2mVdunSx6dOn\n265du+yDDz4wM7OVK1dar1697MiRIzVtZsyYYVdeeaW99tprtmfPHps4caIl JSXZJ598Es5LDLke\nPXrY7NmzGzzmyy+/NMBWr15da/8VV1xhCxcuDGV4EmFAgQU5F6sHL55c2Hs/r65efEFBAenp6aSn\np1NSUsKiRYt IT08nJycHgLKyMvbt28fZs2dr2uTm5jJ58mRycnLIyMjggw8+YMOGDVExRBPsm85J\nSUn069eP/Px8ysrKqKysZMWKFZw6dYrBgwcH5yTS fAT7E8PUg49JaWm1e+/nt7S0SEcWWXffbRYX\nZ3bPPb6P9dKDNzMrLS21gQMHGmAtW7a0yy+/3P70pz8FIVppylAPXiJl16660nvV/uYqF DedzYzp\n06fTokULNm/ezM6dO5kxYwZ33XWXyjeI3/xa8ENEvlHXTedFixr3nps2beKVV16hpKSk5qZsWloa\n27Zt46mnnmL58kuWQxap l3rwIgE433s/c6bq9ZkzwenFnzx5Eqh6mvdCLVq0oOpbvIh3SvAiAfB6\n07m8vJzi4mKKi4s5c+YMpaWlFBcXs3//fgBWrVpF7969OXr0K ABZWVl07NiRSZMmUVRUxP79+5k/\nfz4bN25kzJgx4bg0iSFK8CIB2LHjm977eWfOwMVT1f2dVZScnMz69esB+O53v0taWhovvvgiS5cu\n Zdy4cSG/LoktLhRf+zIzM62goCDo7ysiEqucc4VmlhnM91QPXkQkRinBi4jEKCV4EZEYpQQvIhKj\nlOBFRGKUEryISIxSghcRiVFK8CIiM UoJXvwWyDJ0u3fvZvjw4SQnJ3PZZZcxevRoDh48GPpgRZox\nJXjxm7/L0JWWlnLbbbdxxRVX8Pbbb7N161bOnTvHkCFD+Oqrr8IQsUjzpH LB4rfs7Gyys7MBeOih\nh3we//rrr3P69Gl+//vf06pVKwCef/55kpOTWbFiBZMnTw5pvCLNlc8evHOurXPuHefc/zrn3nPO\nPR6OwCR2V FRU0KpVK1q2/KY/0bZtW+Li4tiyZUsEIxOJbV6GaE4Dt5vZvwJpwDDnXP/QhiWRFOx1\nRgcPHkx5eTmzZs2ioqKC8vJyfvazn1FZWcknn3 wSnJOIyCV8Jvjq5QLLq1+2qt608kAMmz0btm69\ntLZ5oG644Qby8/NZtmwZ7dq1o0OHDlRUVJCRkUFcnG4DiYSKp39dzrkWzrli4DNgg5n 9NbRhSaSE\nYp1RgB/84AccOXKEkpISPv/8c5YtW8bHH3/MtddeG5wTiMglPCV4MztnZmlACvAd51y/i49xzk11\nzhU45wqOHTsW7DglTO paZzSYOnXqRPv27dm4cSOfffYZY8eODe4JRKSGX9+Pzew4sAkYVsfvnjWz\nTDPL7NixY7DikzDyus6ov8vQASxatIiCggL2799PXl4eP/j BD5gwYQK33XZbuC5PpNnxMoumo3Mu\nqfrP8cBQ4P1QBybh53WdUX+XoQMoLCzkjjvuoE+fPsydO5eHHnqIvLy8EF+RSPPmc8k+59yNwPNA<br>\nC6o+EP5gZr9sqI2W7ItO6elQXHzp/rQ02LUr/PGINCehWLLP54NOZvYukB7Mk0rTpCQuEls0R01E\nJEYpwYuIxCgleBGRGKUELyISo5T gRURilM9pkgG9qXPHgENBf+OGXQl8HuZzBku0xh6tcUP0xh6t\ncYNi96WHmQX1KdGQJPhIcM4VBHsOabhEa+zRGjdEb+zRGjco9kjQEI2I SIxSghcRiVGxlOCfjXQA\njRCtsUdr3BC9sUdr3KDYwy5mxuBFRKS2WOrBi4jIBaI+wTvnrnbObXLO/a16UfAZkY7Ji1hYzLx6\npa9dzrn XIx2LV865g8653c65YudcVJU8dc4lOededs6975zb65y7OdIxeeGc61X9931+O+Gcuy/S\ncXnhnPvv6n+fe5xzLznn2kY6Jn9E/RCNc64L 0MXMipxzlwGFwGgz+1uEQ2uQc84B7cys3DnXCtgK\nzDCzv0Q4NM+cc/cDmcDlZjYi0vF44Zw7CGSaWdTNx3bOPQ+8bWbPOedaAwnVi/BED edcC+Ao8G9m\nFu5nZfzinOtG1b/LPmb2lXPuD8AaM8uLbGTeRX0P3sxKzKyo+s//BPYC3SIblW/Rvpi5cy4FGA48\nF+lYmgPnXHtgILAU wMzORFtyrzYY+LCpJ/cLtATinXMtgQTgkwjH45eoT/AXcs6lUlW7PioWBY/y\nxcwXAg8Clb4ObGIMWO+cK3TOTY10MH74F+AYsKx6WOw55 1y7SAcVgLuAlyIdhBdmdhRYABwGSoAy\nM1sf2aj8EzMJ3jmXCLwC3GdmJyIdjxdeFjNvipxzI4DPzKww0rEEYICZfRu4A5junBsY6YA8ag l8\nG/h/ZpYOnAR+HtmQ/FM9rDQS+GOkY/HCOdcBGEXVh2tXoJ1zbkJko/JPTCT46jHsV4B8M1sZ6Xj8\n1dBi5k3ULcDI6vHsFcDtzrnlk Q3Jm+peGWb2GbAK+E5kI/LsCHDkgm95L1OV8KPJHUCRmX0a6UA8\nGgIcMLNjZnYWWAlkRTgmv0R9gq++WbkU2GtmT0Y6Hq+ieTFzM/u/Zp ZiZqlUfeV+y8yafM/GOdeu\n+kY81cMb/wfYE9movDGzUuBj51yv6l2DgSY9kaAO/0GUDM9UOwz0d84lVOeZwVTd44saPtdkjQK3\nAD8Gd lePZwP8wszWRDAmL7oAz1fPKji/mHnUTDeMUlcBq6r+rdISeNHM1kY2JL/cC+RXD3V8BEyO\ncDyeVX+gDgWmRToWr8zsr865l4Ei4GtgF1 H2RGvUT5MUEZG6Rf0QjYiI1E0JXkQkRinBi4jEKCV4\nEZEYpQQvIhKjlOBFRGKUEryISIxSghcRiVH/HyJLuijyNr3YAAAAAElFTkSuQmC C\n”,<br>      “text/plain”: [<br>       “<matplotlib.figure.figure at="" 0x105f1da20="">“<br>      ]<br>     },<br>     “metadata”: {},<br>     “output_type”: “display_data”<br>    }<br>   ],<br>   “source”: [<br>    “contrivedTest(1, 2, True)”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 17,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def contrivedTest2(numTrials, k, verbose):\n”,<br>    “   random.seed(0)\n”,<br>    “    xMean, xSD = 3, 1\n”,<br>    “    yMean, ySD = 5, 1\n”,<br>    “    n = 8\n”,<br>    “   d1Samples = genDistribution(xMean,xSD, yMean, ySD, n, ‘1.’)\n”,<br>    “   plotSamples(d1Samples, ‘b^’)\n”,<br>    “   d2Samples = genDistribution(xMean + 3,xSD,yMean, ySD, n, ‘2.’)\n”, </matplotlib.figure.figure></p>
<pre><code>&quot;   plotSamples(d2Samples, &apos;ro&apos;)\n&quot;, 
&quot;   d3Samples = genDistribution(xMean, xSD, yMean + 3, ySD, n, &apos;3.&apos;)\n&quot;, 
&quot;   plotSamples(d3Samples, &apos;gd&apos;)\n&quot;, 
&quot;   clusters = trykmeans(d1Samples + d2Samples + d3Samples,\n&quot;,
&quot;                        k, numTrials, verbose)\n&quot;,
&quot;   print(&apos;Final result&apos;)\n&quot;,
&quot;   for c in clusters: print(c)&quot; 
</code></pre><p>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 18,<br>   “metadata”: {<br>    “collapsed”: false<br>   },<br>   “outputs”: [<br>    {<br>     “name”: “stdout”,<br>     “output_type”: “stream”,<br>     “text”: [<br>      “Final result\n”,<br>      “Cluster with centroid [5.588496601612878, 4.432602361003936] contains:\n”,<br>      “ 1.0, 1.3, 1.5, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7\n”,<br>      “Cluster with centroid [2.8094991120730017, 7.117357378545625] contains:\n”,<br>      “ 1.1, 1.2, 1.4, 1.6, 1.7, 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7\n”<br>     ]<br>    },<br>    {<br>     “data”: {<br>      “image/png”: “iVBORw0KGgoAAAANSUhEUgAAAX4AAAD8CAYAAABw1c+bAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFU<br>eJzt3Xl8VdW58PHfIpBZCUXmmMQARQ1SNNEXA6IIqTShIC9e\n6BX7AZE3ULgM5RaBC4oWgZZwAVughpbBV6bbyyWKMgkIlamFhOSVuSIzJ oJigklkzPP+cZJIxjOf\nk5zzfD+f/Tmcfdbe+9nRPGdlrbXXMiKCUkop/9HA2wEopZTyLE38SinlZzTxK6WUn9HEr5RSfkYT\nv1JK+RlN<br>/Eop5Wc08SullJ/RxK+UUn5GE79SSvmZhp682H333ScxMTGevKRSStV7WVlZX4tIM1ed\nz2riN8YsA/oAl0WkY+m+HwH/BcQAZ4GBIvKtt XPFxMSQmZnpTLxKKeV3jDHnXHk+W5p6VgC9K+2b\nDOwQkfbAjtL3Siml6gGriV9EPgWuVtrdD3i39N/vAs+7OC6veO+994iPj6dJkyaEhI Tw0EMPMW/e\nPKxNZPfpp5/y7LPPEh4eTnh4OI8//jhnzpzxSjy3bt3i1VdfpVWrVoSEhNCtWzeysrKcjkUp5Tsc\nbeNvISK5pf/OA1q4K B6vat68Oa+99hodOnQgKCiI3bt3M2rUKAICAhg3bly1x2zZsoUBAwYwadIk\nFixYQGhoKMePHyc0NNQr8UycOJH33nuP5cuXExsby5w5c+ jVqxfHjx+nZcuWTseklKr/jC3TMhtj\nYoCP7mrjzxeRiLs+/1ZEmtRwbCqQChAVFRV/7pxLm6rcrn///gBkZGRU+aykpIR27doxaNAgZs+ e\n7fV4rl27RvPmzfnDH/5AamoqAHfu3KFNmzaMHDmSN954wyMxKqVcyxiTJSIJrjqfo8M5vzLGtCoN\nqBVwuaaCIrJERBJEJKFZM5d1Sj vk6OWjdFzckaOXj1otKyIcOHCAvXv30qNHj2rLHDp0iDNnzhAZ\nGUn37t1p3rw5Xbp0qTYpeyKerKwsbty4Qe/eP3TJBAQEkJSUxJ49e2y KSSnl+xxN/BuAIaX/HgJ8\n4Jpw3KfoZhHJq5M5duUYKatTKLpZVG25goICwsPDCQoKIjExkTFjxjB27Nhqy37xxRcATJs2jZde\neomPP/ 6YPn36MGDAALZt2+bxeHJzLa1vlZt0WrZsWf6ZUkrZMpxzDfAMcJ8x5iIwHfgd8FdjzCvA\nOWCgO4N0hWEbhnG56DKC8FXRV7yy4RXWvrC 2Srl77rmHnJwciouL2bdvH1OmTKF169a88sorVcqW\nlJQAMHz48PKmlc6dO/P3v/+dP/7xjyQlJXk0HqWUsoXVxC8i/1rDRz1dHIvbLMte xsZ/buT67esA\nXL99nQ//+SHLspcx7NFhFco2aNCAdu3aAdCpUye+/fZbpk6dWm2ibdWqFQBxcXEV9sfFxbFlyxav\nxZOXl0dUVFT5/q+<br>++qr8M6WU8ospG6bsmELRrYpNKcW3ipmyY4rVY0tKSrh+/Xq1nyUkJBASEsKJ\nEycq7D958iS1PaHsrnji4+MJCgpi69atFcpv376dbt26 WT23Uso/+EXin91zNmGNwirsC20Uyu96\n/a7CvunTp7N9+3ZOnz7NyZMn+fOf/8zvf/97hgyxdGdkZGTw4IMPcunSJQDCw8MZM2YMixYtY vXq\n1Zw6dYoFCxbw4Ycf1jjc0p3x3HvvvYwcOZL/+I//4KOPPuLo0aMMGzaM77//nhEjRjjwk1NK+SKP\nztXjLcMeHcbWL7ay4eQGrt++ TnDDYH7+45/zcueXK5S7du0aI0eO5NKlSwQHBxMbG8vs2bMZOXIk\nYOloPXnyJLdu3So/ZtasWQQFBfHqq6/y7bff8tBDD5GRkcGzzz7rl XjS0tIIDAxk+PDh5OfnEx8f\nz7Zt27SpRylVzqZx/K6SkJAg3pqrp+hmEQ8vfpgLBReIahzF0VFHCQsMs36gn8SjlKq76so4/non\nLDCM TS9u4uFmD7PxxY1eT7J1LR6llP/wmxq/UkrVV1rjV0op5RRN/Eop5Wc08SullJ/RxK+UUn5G\nE78C7F/0ZdeuXRhjqt3S0tI8HL1Syh5+8 QCXss7eRV8SExOrzPi5Zs0afvOb3zBwYJ2fs08pv6bD\nOVWNalv0pTpdu3YlIiKCjRs3ujMspfyODudUbmfLoi+VHT58mH379umcQErVA5 r4/YQtq33Zs+hL\nZenp6bRp04aUlBRXhayUchNN/H7A1tW+yhZ9yczMZOHChcybN4+lS5daPX9xcTErV65k+PDhBAQE\nuDp8pZSLaeeuH 7B1tS97Fn2525o1aygsLGT48OFuiV8p5Vpa4/dxta32ZU1ti77cLT09nZSUFCIj\nI52OVynlfpr4fZytq33Zu+hLmezsbA4ePKidukrVI9 rU4+Nm95zN2M1jKyT/6lb7cmTRF7DU9qOi\noujdu7f7b0Yp5RJOjeM3xowD/g9ggD+LyILayus4fu8YtG5QhdW++nXoV20bv1Kqbqoz4/i NMR2x\nJP0ngJ8AfYwx7VwVmHKdZX2X0TysOQZDi7AWLO1rfaSOUsp3OdPG/xDwDxEpFpHbwN+A/+2asJQr\n6WpfSqm7OdPGfwSYaYxpCn wPJAPajlNHxTWP48ioI94OQylVBzic+EXkuDHm98DHQBGQA9ypXM4Y\nkwqkAkRFRTl6OaWUUi7i1HBOEVkqIvEi0h34FvhnNWWWiEiCiCQ 0a9bMmcsppZRyAaeGcxpjmovI\nZWNMFJb2/S6uCUsppZS7ODuO/39K2/hvAaNFJN8FMSmllHIjpxK/iDzlqkCUUkp5hk7ZoJRSfkYT\nv1 JK+RlN/Eop5Wc08SullJ/RxK+UUn5GE79SSvkZTfxKKeVnNPErpZSf0cSvlFJ+RhO/Ukr5GU38\nSinlZzTxK6WUn9HEr5RSfkYTv1JK+Rl N/Eop5Wc08SullJ/RxK+87r333iM+Pp4mTZoQEhLCQw89\nxLx58xARm44fOnQoxhjeeustN0eqlG/QxF8HOZIIZ86cyVNPPcW9996LMYaL Fy96MGLnNG/enNde\ne419+/Zx9OhRJk+ezGuvvcYf/vAHq8euWLGCw4cP07p1aw9EqpRvcHbNXeUGZYmwQ4cOBAUFsXv3\nbkaNGkVAQAD jxo2r9pgbN27Qt29f+vTpw+TJkz0csXOee+65Cu9jY2N5//332bVrV433C3Ds2DEm\nT57M7t27SUpKcneYSvkMTfx1kCOJ8Le//S0Au3bt cnd4djt6+SiD1g3iv174L+Kax9VaVkQ4ePAg\ne/fuZdq0aTWWKy4uZuDAgaSlpdG+fXtXh6yUT3OqqccY82tjzFFjzBFjzBpjTLCrAlMWI sKBAwfY\nu3cvPXr08HY4diu6WUTy6mSOXTlGyuoUim4WVVuuoKCA8PBwgoKCSExMZMyYMYwdO7bG844ePZrH\nHnuMX/7yl+4KXSmf5XDi N8a0AcYCCSLSEQgAfuGqwHzZ0ctH6bi4I0cvH62xjL2JsK4atmEYl4su\nIwhfFX3FKxteqbbcPffcQ05ODpmZmSxcuJB58+axdOnSasuuW rWKvXv3snjxYneGrpTPcrZztyEQ\nYoxpCIQCXzofkm+ztQZsTyKsq5ZlL2PjPzdy/fZ1AK7fvs6H//yQZdnLqpRt0KAB7dq1o1OnTowc\n OZJXX32VqVOnVnvebdu2cerUKSIiImjYsCENGzbk3LlzTJ8+neBg/aNTKWscTvwicgmYC5wHcoEC\nEfnYVYH5KltrwPYkwrpqyo4pFN2q+ MVWfKuYKTumWD22pKSE69evV/vZzJkz+eyzz8jJySnfWrdu\nzejRo8nKynJJ7Er5MmeaepoA/YAHgNZAmDHmpWrKpRpjMo0xmVeuXHE8Uh 9gTw24stoSYV01u+ds\nwhqFVdgX2iiU3/X6XYV906dPZ/v27Zw+fZqTJ0/y5z//md///vcMGTIEgIyMDB588EEuXboEQJs2\nbejYsWOFr VGjRjRv3py4uNo7j5VSzjX19ALOiMgVEbkFrAcSKxcSkSUikiAiCc2aNXPicvWfrTVg\nexMhwPnz58nJyeHUqVOAZahjTk4OV69edfNd1W</p>
<p>zYo8NI+XEKwQ0tzS/BDYP5+Y9/zsudX65Q7tq1\na4wcOZK4uDi6dOnCO++8w+zZs5k3bx5g6e84efIkt27d8vg9KOWTRMShDfhfwFEsbfs GeBcYU9sx\n8fHx4s+WHloqYTPDhDco30Jnhsqy7GUVyo0fP17atm0rwcHBEhERIY899pgsXLhQbt++LSIiy5cv\nF0DOnDlTfsyQIUMEqL ItX77cg3dYVeGNQomaHyXmDSPR86Ol8EahV+NRqj4CMsXBXF3dZsTGx+Kr\nY4x5ExgE3AaygeEicqOm8gkJCZKZmenw9XzBoHWD2HByA9d vXye4YTD9OvRj7QtrvR2WW9kzjl8p\nVZUxJktEElx2PmcSv7008VtG9Ty8+GEuFFwgqnEUR0cdJSwwzPqBSim/5erEr3P1eFhYYBibXtzE<br>\nw80eZuOLGzXpK6U8Tqds8IK45nEcGXXE22EopfyU1viVUsrPaOJX5RyZDjomJgZjTIWtW7duHoxa\nKWUvbepR5RyZDhpg0qRJjB8/vvx 9YGCgJ8JVSjlIE78q5+i8+OHh4bRs2dLd4SmlXESbelS1xI7p\noBcuXEjTpk2Ji4tj7NixfPPNNx6KUinlCE38fsQd00GPGTOGlStXsmvX Lt544w22bt1KYmIi33//\nvTtuQSnlAvoAl5+w9cGxkpISTp8+TXFxMfv27WPKlCnMnTuXV16pfhbRyk6fPk27du1YuXIlL774\noqtvQym<br>/5OoHuLSN309UNx10dVNFlE0HDdCpUye+/fZbpk6danPij42NpUWLFpw9e9aV4SulXEib\nevyAJ6eDvnTpEpcvX+b+++93OF6llHtp4vcD 7poOev/+/cydO5dDhw5x7tw5tm7dSp8+fYiKiqJ/\n//6euTmllN20qccPzO45m7Gbx1ZI/tUtiFI2L/6lS5cIDg4mNjaW2bNnM3LkSKDqv PhBQUGsX7+e\nWbNmUVRURGRkJD/96U+ZPn064eHhnrtBpZRdtHPXT/jjdNBK+QqdnVM5ZFnfZTQPa47B0CKsBUv7\n1q+F25VSrqOJ30/o dNBKqTKa+OsYeydKO3/+PCNGjKB9+/aEhIQQGRnJyy+/XGE93jJl00HrKlhK\n+Tft3K1j7J0o7eTJkxQVFbFgwQIefPBBcnNzmTBhAr179 yYnJ4eAgAAv3IVSqi7Tzt16oGxoZEZG\nhk3lDx06RHx8PJ999hmPPPKIO0NTSnmAdu7Wc7bMl1PGnonS7pafnw9AaGiow3EqpXyXw4nfGN PB\nGJNz13bNGDPe+pH+q+hmEcmrkzl25Rgpq1MoullUbTl7J0q7W2FhIRMmTGDAgAG0bdvWleErpXyE\nw4lfRE6KSGcR6QzEA8WAbW0Rf qq6+XKqc88995CTk0NmZiYLFy5k3rx5LF1qffhlUVERffv2pWHD\nhjaVV0r5J1d17vYEvhCRcy46n8+pbb6cYY8Oq1DWkYnSCgoKSElJ4d atW2zfvp3GjRu772aUUvWa\nq9r4fwGscdG5fJKt8+VUx9pEaV9//XV5H8C2bduIiIhwLlillE9zOvEbYwKBvsB/1/B5qjEm0xiT\neeXKF WcvV2/N7jmbsEYVH5qqbr4ceydKy83NpXv37hhjePfddykuLiYvL4+8vDxu3rzpmZtTStUr\nrqjx/ww4JCJfVfehiCwRkQQRSWjWrJkLLl c/DXt0GCk/TiG4YTAAwQ2D+fmPf87LnV+uUK5sorS4\nuDi6dOnCO++8w+zZs5k3bx5QdaK0rVu3cvz4cQ4dOkS7du1o1apV+bZv3z6X3oO 9D5cBvPTSS7Rt\n25aQkBCaNm1KUlIS+/fvd2lcSin7uKKN/1/RZh6bLOu7rHwVrMZ5jSn8eyHR/x7N+fPnmTFjBtOm\nTWP+/PnMnz+/xn PExsbSo0cPOnbsCMBDDz3E6dOneeCBB9wev70PlwF06dKFESNGcP/993Pt2jXm\nz59PUlISJ0+epE2bNm6PWSlVlVMPcBljwoDzQKyIFFg rrw9wWcbxD1o3iNERozl/+DydO3dm/Pjx\njB49mmnTptV67JYtWxgwYACTJk3i+eefJzQ0lOPHj/PEE0/QokULD91BRfY+XFZQUEBERATv v/8+\n/fr1c2doSvmMOrX0oogUAU1dFItfKJsv526TJk2yelxJSQmjRo1i7NixvP766+X7y0b/eJqIcPDg\nQfbu3Wv1C6vM9evXWbx4MeH h4Tz++ONujlApVRN9creeOHToEGfOnCEyMpLu3bvTvHlzunTpYnNN\n2xa2PFXsyMNlZck+NDSUxYsXs2PHDlq3bu2yuJVS9tHEX0988cUX AEybNo2XXnqJjz/+mD59+jBg\nwAC2bdvm9PltfarYkYfLBg8eTE5ODnv27KFnz5688MILnD9/3umY64u0tDSefPJJmjRpQkREBN26\ndWP Lli21HmPPrKtK2UsTvxvk5sLTT0NenuvOWVJSAsDw4cNJTU2lc+fOTJs2jeTkZP74xz86fX5b\nnyoue7isU6dOjBw5kldffZWpU6fWeu7G jRvTrl07EhMTWbFiRXnN31988sknDBs2jJ07d3LgwAES\nExPp06cPe/furfGYu2ddPXLkCGvXruXo0aP07t2bO3fueDB65Yt0WmY3mDED9 uyxvC5a5JpztmrV\nCoC4uIpz6cfFxVmtPVpjz1PFlVl7uMxVx9RnmzdvrvB+zpw5bNmyhfXr19O1a9dqj0lKSiIpKan8\nfdu2bXnnnXeI j4/n2LFjOuuqcorW+F0sNxeWL4eSEsurq2r9CQkJhISEcOLEiQr7T548SUxMjFPn\ntvWpYnsfLjty5AhpaWlkZWVx/vx5Dh48yLBhwzhz5 gyDBw92Kub6rKSkhGvXrhEWZt8qaDrrqnIV\nTfwuNmOGJekD3LljeV+dwsJCcnJyyMnJ4ebNm+Tl5ZGTk8OpU6eAqkk0PDycMWPGsGjRIl avXs2p\nU6dYsGABH374YY1j6G1l61PF9j5cFhwczI4dO0hOTqZdu3Y8//zzXL16ld27d/v1qJ5Zs2aRn59P\namqqzcforKvKpUTEY1t8f Lz4si+/FAkOFoEftpAQkdzcqmV37twpQJXt6aefFhGR5cuXCyBnzpwp\nP+b27dvy2muvSZs2bSQ0NFTi4+Plgw8+cEnsA/97oAS/FSy8gQ S/FSyD/nuQS87r81auFImOFjHG\n8rpyZa3FFy1aJCEhIbJt2zabL1FYWCg9evSQ+Ph4yc/Pdy5eVS8BmeLCXKyJ34V+9SuRwMCKiT8w\nU GTUKG9HZl3hjUKJmh8l5g0j0fOjpfBGobdDqvtWrhQJDa34Hzw0tMbkn5aWJqGhoXYl/fz8fOna\ntas88cQT8u2337oqclXPuDrxa1OPC+ 3fD5XnRbt5E1w8ZY5bhAWGsenFTTzc7GE2vriRsED72p/9\n0tSpUFxccV9xsWV/Ja+//jpvvvkmmzZtolevXjadXmddVe6ia+4q5agGDSz 1/MqM+aGjBxg/fjzp\n6emsWbOGLl26lO8PCQkpXzchIyODKVOmsGPHDtq0aUNubi49e/YkJCSEv/71rxU6gn/0ox8RGBjo\nvvtSdU6dmr JBKb8WFQXnqll7KCqqwtu3334b+GFeozJDhgxhxYoVQM2zrkLVaTl27tzJM88844Ib\nUP5Ka/xKOWrVKkhNrdjcExoKS5aAHw9XVa7n6hq<br>/tvEr5ajBgy1JPjra0rwTHa1JX9UL2tSjlDMG\nD9ZEr+odrfErpZSf0cSvlFJ+RhO/Ukr5GU38SinlZzTxK6WUn9HEr5RSfsapxG+MiTDG rDPGnDDG\nHDfGPOmqwJRSSrmHs+P43wa2iMgLxphAQFeIUEqpOs7hxG+MaQx0B4YCiMhN4GZtxyillPI+Z5p6\nHgCuAMuNMdnGmL8YY3Q uX6WUquOcSfwNgceAP4nIo0ARMLlyIWNMqjEm0xiTeeXKFScup5RSyhWc\nSfwXgYsi8o/S9+uwfBFUICJLRCRBRBKaNWvmxOWUUkq5gsOJ X0TygAvGmA6lu3oCx1wSlVJKKbdx\ndlTPGGBV6Yie08DLzoeklFLKnZxK/CKSA7hscQCllFLup0/uKr+RlpbGk08+SZMmTYiIiKBbt25s\ n2bLF6nExMTEYYyps3bp180DESrmHJn7lNz755BOGDRvGzp07OXDgAImJifTp04e9e/daPXbSpEnk\n5uaWbxs2bPBAxEq5h67ApfzG5s2b K7yfM2cOW7ZsYf369XTt2rXWY8PDw2nZsqU7w1PKY7TGr/xW\nSUkJ165dIyzM+nOHCxcupGnTpsTFxTF27Fi++eYbD0SolHtojV/5rVmzZ pGfn09qamqt5caMGcNP\nfvITWrRowYkTJ5g2bRpbt24lJyeHkJAQD0WrlOtojd9Bn376Kf369SM6OhpjDG+99ZbVY2bOnMlT\nTz3Fvffe izGGixcveiBSP7FqFcTEQIMGltdVq2otvnjxYmbNmsW6deuIjIystey///u/06tXLx55\n5BH+5V/+hc2bN/P555+TkZHhuviV8iBN/A4qL Czk4YcfZs6cOTa3/d64cYO+ffsydepUN0fnZ1at\ngtRUOHcORCyvqak1Jv+5c+cyceJENmzYQK9evey+XGxsLC1atODs2bNOBq6Ud2hTj4 OSk5NJTk4G\nLCM+bPHb3/4WgF27drkrLP80dSoUF1fcV1xs2T94cIXdr7/+OvPnz2fTpk08/fTTDl3u0qVLXL58\nmfvvv9/RiJXyKq3xK 49wZAz9rl27qoyfL9vS0tJ+KHj+fPUnqLR//PjxpKWl8d5779GhQwfy8vLI\ny8ujoKCgvExGRgYPPvggly5dAmD//v3MnTuXQ4cOce7cOb Zu3UqfPn2Iioqif//+jv0wlPIyTfzK\nIxwZQ5+YmFhh7Hxubi7z5s2jQYMGDBw48IeCUVHVn6DS/rfffpvr16/Tv39/WrVqVb6NGzeuvEx B\nQQEnT57k1q1bAAQFBbF+/Xp69erFj3/8Y0aNGkWXLl3Yv38/4eHhjv9AlPImEfHYFh8fL+7wt7/9\nTfr27StRUVECyIwZM+w6fsiQIV WO+/JLke7dRXJzrR8fHR1t1zV37twpgFy4cMGuOH3NI488IhMm\nTLDrmMTERElOTq64c+VKkdBQEUsLv2ULDbXsV8oHAJniwlzsEzV+Rzp ay6xYsYLDhw/TunXrCvtn\nzIA9eyyvyvXsGUNf5vDhw+zbt48RI0ZU/GDwYFiyBKKjwRjL65IlVdr3lVIWPpH4k5OTmT17NoMG\nDSIoKM jm444dO8bkyZNZu3YtjRo1Kt+fmwvLl0NJieU1L88dUfsYO4dT2jqG/m7p6em0adOGlJSU\nqh8OHgxnz1r+o509q0lfqVr4ROJ3RHFxMQM HDiQtLY327dtX+GzGDEv+ALhzp/paf2FhITk5OeTk\n5HDz5k3y8vLIycnh1KlTQNVOQoDz589XKHPs2DFycnK4evWqe27SU+wcTmnPGPoy xcXFrFy5kuHD\nhxMQEODK6JXyP65sN7K2uauN/262trcPHTpUfvnLX1Y57ssvRYKDKzYXh4RUbesva6evvD399NMi\nIrJ8+XIB5MyZM+X HlPUlVN6WL1/ugjv3oujoij+wsi06ukrRtLQ0CQ0NlW3bttl1ib/85S8SEBDg\nc/0ic+bMkS5dukhERIQ0btxYunbtKps3b7brHNX1USnf gj+28efmwtNPu67JZdWqVezdu5fFixdX\n+ezu2n6Z6mr9zzzzTLU/0LIx+kOHDkVEiImJKT9mxYoV1R4zdOhQ19yYt9g4nPL111/nzTffZ NOm\nTXY/OJWenk5KSorNfyHUF87MGAo191EpVStXfotY2xyt8f/qVyINGoiMGmW9rC01/iFDhogxRgIC\nAso3QBo0aCDGBFVbee3c2aHQ<br>/YMNNf5x48ZJcHCwZGRkSG5ubvmWn59fXmb9+vXSoUMHuXjxYoXT\nHzp0SADZuHGjh27Iu2wd7XT06FFp0aKF/POf/7R7ZJmqX/C3Gr87O lpnzpzJZ599Vt5Gn5OTQ+vW\nrRk9ejSHD2dVk8EgO9v56/qsmTMhNLTivtBQy/5SjoyhL5Oenk5UVBS9e/d2623UBbaOdqqtj0op\nq1z5 LWJtc6TG/6tfiQQGWtJvYGD1tf7vvvtOsrOzJTs7W1q1aiWjR4+W7Oxs+fzzz0Wk5ppk5fH/\nPXv2rDWWc+fOSWpqqrRr106Cg4OlTZs2M nTo0Crn9UsrV1pq+MZYXnUMvUM/kxkzZkjjxo2t9mXU\n1EelfBMurvHX6cTvzo5WEZGNGzfK5MmTZe3atdKgQQOrif/jjz+WwYMHy0cffS SnTp2S3bt3y+OP\nPy4dO3aU27dv23Vvysc58FDZokWLJCQkxGrH98qVK6V9+/by3Xffle/TxO/b6lTiB84Ch4EcWwKz\nN/HfXdsv22qq9 TvL0V+crKwsAeSzzz5zfVCq/rJjpJOIfaOdauujCgoKcu19qDrB1YnfFbNz9hCR\nr11wnir274ebNyvuu3kT9u1zx9Uck5+fD0Bo5TZu5d 9sHOkE9s8YOnPmTH7zm99U2Pfcc88xYMCA\nqk81K1WNOj0tc13vUC0sLGTChAkMGDCAtm3bejscVZdERVkeZKtu/13Gjx9Peno6a9asKZ8 xFCAk\nJITGjRsDlocBp0yZwo4dO2jTpk35drdGjRrRvHlz4uLi3HM/yqc4O6pHgI+NMVnGGNufvfcAV4/9\nr6yoqIi+ffvSsGFDli5d6p 6LqPrLhpFO4NxoJ6Uc5WyNv5uIXDLGNAe2GWNOiMindxco/UJIBYiq\nafpcN7h7krVFi1x77oKCAlJSUrh16xbbt28vr5kpVa5srqCpUy3 NO1FRlqRfaQ4hS/Nt7YYOHWr1\nIT9dDUzZw6kav4hcKn29DGQAT1RTZomIJIhIQrNmzZy5nM3cOcna119/TY8ePQDYtm0bERERrju5\n8i 06cZyqoxxO/MaYMGPMPWX/Bn4KHHFVYM6wZZI1sH+itdzcXLp3744xhnfffZfi4uLyVZxuVu6F\nVkqpusrkTyGYAAAQp0lEQVTR4UBALPD<br>/SrejwFRrx3hikjZbx/6L2D/+v+x9ddvOnTvdfm9KKf+E\ni4dzGrGhjdFVEhISJDMz063XGDUKli6tOAw0MBCGD3d9W79SSnmCMSZLRBJc db46P1ePverD2H+l\nlPKmOj2O3xF1fey/Ukp5m8/V+L3t008/pV+/fkRHR2OM4a233qq1/K5duzDGVLulpaV5KGqllD/R\nxO9i9i78npi</p>
<p>YSG5uboVt3rx5NGjQgIEDB3ogYqWUv/G5ph5vS05OJjk5GYBJkyZZLR8YGFjlC2Ld\nunX07t2b6Ohot8SolPJvmvjrmMOHD7Nv3z4++OAD b4eilPJR2tRTx6Snp9OmTRtSUlK8HYpL2dv3\nARATE1Ol36Nbt24eiFYp36aJ3w7unvituLiYlStXMnz4cAICAtxzES+xt++jzKRJkyr0f 2zYsMGN\nUSrlH7Spxw7unPgNYM2aNRQWFjJ8+HDXn9zL7O37KBMeHm7XF4VSyjqt8dvInRO/lUlPTyclJYXI\nyEjXn7yeWrhwIU2bNiUu Lo6xY8fyzTffeDskpeo9Tfw2ctfEb2Wys7M5ePCgrqB0lzFjxrBy5Up2\n7drFG2+8wdatW0lMTOT777/3dmhK1W+unPjH2uaJSdrcwZ0Tv 5UZMWKEREVFyZ07d5yO929/+5v0\n7dtXoqKiBLBpLeHBgwdLbGysBAcHy49+9CPp1auX7Nu3z6brffmlSPfu1f88quPo+sZffPGFGGNk\n 1apVdh+rVH2Giydp0xq/De6u7Zepqdb/zDPPVPuD3rVrF2BZVENEiImJqXDcO++8w7lz52jQwPn/\nJI50pHbp0oUVK1Zw/Phxdu7cSWRkJ ElJSVX+MqnO3X0f7hQbG0uLFi100RGlnKSJ3wb1beK35ORk\nZs+ezaBBgwgKCrLpmH/7t3/jqaeeIiYmhk6dOrFgwQKKioqwNpuqJ/o+yl y6dInLly9z//33u+8i\nqk5LS0vjySefpEmTJkRERNCtWze2bNli9biXXnqJtm3bEhISQtOmTUlKSmL//v0eiLhu0sRvg+zs\nuxt5fth8d UK469evs3jxYsLDw3n88cdrLeuuvo/9+/czd+5cDh06xLlz59i6dSt9+vQhKiqK/v37\nu+xeVf3yySefMGzYMHbu3MmBAwdITEykT58+7N 27t9bjnPmL1ie5st3I2lZf2/jrM3va0xctWiRh\nYWFijJHIyEj5xz/+UWt5d/Z9ZGVlyZNPPilNmjSRwMBAiY2NlZEjR0qurR0Jym888sg jMmHCBLuO\nyc/PF0Def/99N0XlWmgbv3LXg2SDBw8mJyeHPXv20LNnT1544QXOnz9fY3l39n089thj7Nu3j6tX\nr3Ljxg2++OIL/vSnP+ mYflVBSUkJ165dIywszOZj7PmL1ldp4q+H3NWZ2rhxY9q1a0diYiIrVqwg\nNDSUxYsX11i+vvV9KN8za9Ys8vPzSU1NtVq2LNmX/X+9Y8c OWrdu7YEo6x5N/PWMJztTS0pKuH79\neo2f+1vfh3KzVasgJgYaNLC8rlpVa/HFixcza9Ys1q1bZ9NDj/b+RevLNPHXM7Z0ptrbkXrkyBHS<br>\n0tLIysri/PnzHDx4kGHDhnHmzBkGDx7sqVtT/mzVKkhNhXPnLLWHc+cs72tI/nPnzmXixIls2LCB\nXr162XQJe/+i9WnOdhIAAUA28JG 1stq56xxbO1Pt7Uj9/PPP5bnnnpPmzZtLo0aNpHXr1tKvXz/Z\nv3+/Z29Q+a/o6Or+eLTsr+S1116T8PBw2bVrl1OXbN++vYwbN86pc3gK Lu7cdUXinwCs1sTvfr/6\nlUhgYMXfi8BAkVGjvB2ZUk4ypvrEb0yFYuPGjZPg4GDJyMiQ3Nzc8i0/P7+8zPr166VDhw5y8eJF\nERE5fPi wzJkzRzIzM+XcuXNy4MABefnll6Vhw4Zy4MABj96mo1yd+J1q6jHGRAIpwF+cOY+yjXam\nKp8VFWXT/rfffpvr16/Tv39/WrVqVb6NGzeu vExBQQEnT57k1q1bAAQHB7Njxw6Sk5Np164dzz//\nPFevXmX37t1+O6rHWL5MHDzYmHXAbOAe4Dci0qe28gkJCWLtSVCllB8qa+MvLv5hX 2goLFkC2s+E\nMSZLRBJcdT6Ha/zGmD7AZRHJslIu1RiTaYzJvHLliqOXU0r5ssGDLUk+OhqMsbxq0ncbh2v8xpjZ\nwC+B20AwcC+wXkRe qukYrfErpZT96kyNX0SmiEikiMQAvwA+qS3pK6WUP3J0YjmwrFX97LPPAjxq\njCk0xhw0xjzgbEw6jl8ppdzI0YnltmzZws9+9jOeeeYZg BNAZ+C3QHFtx9nElUOErG06nNP/OLIo\nzM2bN2XixInSsmVLCQ4Olq5du0pmZqYHolXKM6xNLHfnzh154IEHZPLkySJSx4ZzKmWNI4vCTJ w4\nkaVLl5Kens7BgweJjY2lV69e5LlzfgqlPMSWieUOHTrEmTNniIyMpHv37gA/Mcb83RjjmjnJXfkt\nYm3TGr9/s2WK6IKCAgkKCpL09 PTyfbdv35YWLVrI9OnT3RyhUu43Y8YMady4sVy4cKHGMmvXrhVA\nIiIiJD09XYCjwDSgBEgSrfErX5KVlcWNGzfo3bt3+b6AgACSkpLYs2 ePFyNTqhpumliupHRCruHD\nh5fNPPq9iLwFbALGOBu2Jn7lMHesC5CbmwtQpVmoZcuW5Z8pVSe4aGK56kb9XLhwAYC4uLjKpzkK\nRAMYY xoZY+YYY3KNMd8bY/YYY+JtCV0Tv3KYpxZZV6pOmjq14pPGYHk/dWqVoq+//jpvvvkmmzZt\nqjKbaHWjfqZMmUJQUBAnTpyofKoOwNnSf6 cBrwAjgMeB08B2Y4zVzjRN/Moh7loXoFWrVgBVOnK/\n+uqr8s+UqhNqmsu/0v7x48eTlpbGe++9R4cOHcjLyyMvL4+CggIANm/ezH333cc vfvELwsLCmDNn\nDnFxcTzyyCMsWrSI1atXAwQZY8YDPwfeNsbcC4wEpojIBhE5ArwM3CjdXytN/Mohti6ybq/4+HiC\ngoLYunVr+b6Skh K2b99Ot27dXHMRpVzBTRPLlY36ee655/j1r3/Nq6++CvAw8BLQX0Q+AeKBIKD8\nSTARuQNsA6z/ojjbO2zPpqN6fIM9i6x/9913kp2dLdn Z2dKqVSsZPXq0ZGdny+effy4iVafQFbFM\nvXvffffJhx9+KEeOHJEhQ4ZIRESEfPnll566RaWsW7lSJDS04i9CaKhl/91loqMt00tHR1f8 rAbV\njfqh0jh+4EUs62wEVtqfBhwVK7lYE7+ymz3rAti7KIzIDw9wtWjRQoKCgiQxMVEOHjzomZtTyh61\nJXZbvhgqWbRokYSEhMi2bds q7Hd14ndqWmZ76SRtvuHRRyEnp+r+zp11vV2lysXEWEb6VBYdDWfP\nVtk9d+5cpk+fzgcffFClA7jyJG3GmB7AJ0C0iJy/a///BVqLSK3r UTa060aUQpO7UjaxsfMXLKN+\n5s+fz6ZNm3j66adtOXsWlo7c54A/AxhjGgC9gCXWDtbEr5RS7hAVVX2Nv1Ln7/jx40lPT2fNmjXl\no34 AQkJCaNy4cVmxCGPMCaCniFwSkWvGmHeAWcaYXOAMMBEIAdKthaajepRSyh1mzrSsIna30FDL\n/rvYMuoHCMAyhr/RXfsmAsuxLH2bBbTH Mp2D1ScdtcavlFLuULZ62NSpluadqChL0q+0qpiN/azf\niEiFefhF5BbwaulmF038SinlLoMH18nlI7WpRyml/IwmfqWU2zi67ODMmTN56 qmnuPfeezHGcPHi\nRQ9E6z808Sul3MbRZQdv3LhB3759mVrNhGfKefoAl1LKozp16kRSUhL/+Z//abXsrl276NGjBxcu\nXKh1/npfV/kB LmdpjV8p5TG2LDuo3M/hxG+MCTbGHDDG/D9jzFFjzJuuDEwp5XtmzZpFfn5+2apS\nykucqfHfAJ4VkZ8AnYHexpgurglLKVUv2LH0oK3LD ir3c3gcf+mMcYWlbxuVbp7rMFBKeVfZ0oNl\nq1CVLT0IVcaul01AVnnZQeUdTrXxG2MCjDE5wGVgm4j8wzVhKaXqPBuXHqxt2UHlHU4lfh G5IyKd\ngUjgCWNMx8pljDGpxphMY0zmlStXnLmcUqousWH2SWvLDgJkZGTw4IMPcunSpbtOcZ6cnBxOnToF\nwLFjx8jJyeHq1avuuRd/Y 23Cfls34HXgN7WV0YVYlPIh0dEVFxkp26Kjy4tQzSI8gAwZMqS8THWL\n8QwZMqTa45YvX+6pu6tTqLQQi7Obw+P4jTHNgFsikm+MCQE+Bn 4vIh/VdIyO41fKh1Ru4wfL7JNL\nltTJ+Wnqs7o0jr8VsNMY8xlwEEsbf41JXynlYwYPtiT56GgwxvKqSb9e0Cd3lVKqjqtLNX6llFL1\nk CZ+pZTyM5r4lVLKz2jiV0opP6OJXyml/IxHR/UYY64A5zx2QYv7gK89fE1n1ceYoX7GrTF7Tn2M\nu67EHC0izVx1Mo8mfm8wxmS6chiUJ9 THmKF+xq0xe059jLs+xmwLbepRSik/o4lfKaX8jD8k/iXe\nDsAB9TFmqJ9xa8yeUx/jro8xW+XzbfxKKaUq8ocav1JKqbv4bOI3xtxvjNl pjDlWuhj8OG/HZE19\nXsC+dDW2bGNMvZmh1Rhz1hhz2BiTY4ypF7MHGmMijDHrjDEnjDHHjTFPejum2hhjOpT+fMu2a8aY\n8d6OyxbGmF<br>+X/h4eMcasMcYEezsmV/HZph5jTCuglYgcMsbcA2QBz4vIMS+HViNjjAHCRKTQGNMI\n2AOME5G/ezk0q4wxE4AE4F4R6ePteGxhjDkLJIh IXRinbRNjzLvAbhH5izEmEAgVkXxvx2ULY0wA\ncAn4XyLi6ed57GKMaYPl9+9hEfneGPNXYJOIrPBuZK7hszV+EckVkUOl//4OOA608W5U tStdbKfe\nLWBvjIkEUoC/eDsWX2aMaQx0B5YCiMjN+pL0S/UEvqjrSf8uDYEQY0xDIBT40svxuIzPJv67GWNi\ngEeBOr8YfD1dwH4B8Cp Q4u1A7CTAx8aYLGNMqreDscEDwBVgeWmz2l+MMWHeDsoOvwDWeDsIW4jI\nJWAucB7IBQpE5GPvRuU6Pp/4jTHhwP8A40XkmrfjsUZsWMC+ LjHG9AEui0iWt2NxQDcReQz4GTDa\nGNPd2wFZ0RB4DPiTiDwKFAGTvRuSbUqbpfoC/+3tWGxhjGkC9MPyZdsaCDPGvOTdqFzHpxN/aTv5\ n/wCrRGS9t+OxR+mf8DuB3t6OxYquQN/S9vK1wLPGmJXeDck2pbU6ROQykAE84d2IrLoIXLzrr8B1\nWL4I6oOfAYdE5CtvB2KjXsAZEbki IreA9UCil2NyGZ9N/KUdpUuB4yIyz9vx2MIY08wYE1H67xAg\nCTjh3ahqJyJTRCRSRGKw/Cn/iYjU+ZqRMSastNOf0uaSnwJHvBtV7UQkD 7hgjOlQuqsnUGcHK1Ty\nr9STZp5S54EuxpjQ0lzSE0s/oU9o6O0A3Kgr8EvgcGmbOcB/iMgmL8ZkTSvg3dLRDw2Av+oC9m7T\nAsiw/E7T EFgtIlu8G5JNxgCrSptOTgMvezkeq0q/WJOAEd6OxVYi8g9jzDrgEHAbyMaHnuL12eGc\nSimlquezTT1KKaWqp4lfKaX8jCZ+pZTyM5r4l VLKz2jiV0opP6OJXyml/IwmfqWU8jOa+JVSys/8\nfzQPr9EIE4HfAAAAAElFTkSuQmCC\n”,<br>      “text/plain”: [<br>       “<matplotlib.figure.figure at="" 0x105e40588="">“<br>      ]<br>     },<br>     “metadata”: {},<br>     “output_type”: “display_data”<br>    }<br>   ],<br>   “source”: [<br>    “contrivedTest2(40, 2, False)”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 19,<br>   “metadata”: {</matplotlib.figure.figure></p>
<pre><code>&quot;collapsed&quot;: true 
</code></pre><p>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def readExamples(fName):\n”,<br>    “   \”\”\”Assume file fName has lines with\n”,<br>    “       name, feature1, feature2, …, label\n”,<br>    “   The first line is the header\”\”\”\n”,<br>    “    examples = []\n”,<br>    “   with open(fName, ‘r’) as dataFile:\n”,<br>    “       header = dataFile.readline()\n”,<br>    “       numFeatures = len(header.split(‘,’)) - 2\n”,<br>    “       for line in dataFile:\n”,<br>    “          dataLine = line[:-1].split(‘,’) # remove newline, then split\n”,<br>    “          name, features, label = dataLine[0], dataLine[1:-1], dataLine[-1]\n”,<br>    “           features = [float(f) for f in features]\n”,<br>    “           examples.append(Example(name, features, label))\n”,<br>    “    return examples”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 21,<br>   “metadata”: {<br>    “collapsed”: false<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “ex = readExamples(‘dental.txt’)”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 22,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def histogram(s): \n”,<br>    “    d = {}\n”,<br>    “    for c in s:\n”,<br>    “       d[c] = d[c] + 1 if c in d else 1\n”,<br>    “    return d “<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 23,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def testClustering(examples, numClusters, numTrials):\n”,<br>    “   bestClustering = trykmeans(examples, numClusters, numTrials)\n”,<br>    “   for c in bestClustering:\n”,<br>    “       names = ‘, ‘.join([p.name for p in c.examples])\n”,<br>    “       print(); print(names)\n”,<br>    “       print(histogram([p.label for p in c.examples]))”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 24,<br>   “metadata”: {<br>    “collapsed”: false<br>   },<br>   “outputs”: [ </p>
<pre><code>{ 
 &quot;name&quot;: &quot;stdout&quot;,
 &quot;output_type&quot;: &quot;stream&quot;, 
 &quot;text&quot;: [
  &quot;\n&quot;, 
  &quot;Bear, Deer, Fur seal, Grey seal, Human, Lion\n&quot;, 
  &quot;{&apos;omnivore&apos;: 2, &apos;herbivore&apos;: 1, &apos;carnivore&apos;: 3}\n&quot;,
  &quot;\n&quot;, 
  &quot;Cow, Elk, Moose, Sea lion\n&quot;,
  &quot;{&apos;herbivore&apos;: 3, &apos;carnivore&apos;: 1}\n&quot;, 
  &quot;\n&quot;, 
  &quot;Badger, Cougar, Dog, Fox, Guinea pig, Jaguar, Kangaroo, Mink, Mole, Mouse, Porcupine, Pig, Rabbit, Raccoon, Rat, Red bat, Skunk, Squirrel, Woodchuck, Wolf\n&quot;, 
  &quot;{&apos;carnivore&apos;: 9, &apos;herbivore&apos;: 4, &apos;omnivore&apos;: 7}\n&quot; 
 ]
} 
</code></pre><p>   ],<br>   “source”: [<br>    “testClustering(ex, 3, 20)”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 25,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def stdDev(X):\n”,<br>    “   \”\”\”Assumes that X is a list of numbers.\n”,<br>    “      Returns the standard deviation of X\”\”\”\n”,<br>    “    mean = sum(X) / len(X)\n”,<br>    “   tot = sum((x - mean) <strong> 2 for x in X)\n”,<br>    “   return (tot / len(X)) </strong> 0.5 # square root of mean difference”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 26,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def scale(vals):\n”,<br>    “   \”\”\”Assumes that vals is a list of numbers.\n”,<br>    “   Returns vals normalized to mean 0 and standard deviation 1\”\”\”\n”,<br>    “   mean = sum(vals) / len(vals)\n”,<br>    “    sd = stdDev(vals)\n”,<br>    “   return [(v - mean) / sd for v in vals]”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 27,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: [<br>    “def scaleFeatures(examples):\n”,<br>    “   \”\”\”Assumes examples is a list of objects with field features,\n”,<br>    “   and features are lists of numbers\”\”\”\n”,<br>    “   numExamples = len(examples)\n”,<br>    “   numFeatures = len(examples[0].features)\n”,<br>    “   for f in range(numFeatures):\n”,<br>    “       vals = [examples[e].features[f] for e in range(numExamples)]\n”,<br>    “       vals = scale(vals)\n”, </p>
<pre><code>&quot;       for e in range(numExamples): examples[e].features[f] = vals[e]&quot;
</code></pre><p>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 29,<br>   “metadata”: {<br>    “collapsed”: false<br>   },<br>   “outputs”: [<br>    {<br>     “name”: “stdout”,<br>     “output_type”: “stream”,<br>     “text”: [<br>      “\n”,<br>      “Deer, Guinea pig, Mouse, Porcupine, Rabbit, Rat, Squirrel, Woodchuck\n”,<br>      “{‘herbivore’: 4, ‘omnivore’: 4}\n”,<br>      “\n”,<br>      “Badger, Bear, Cougar, Cow, Dog, Fox, Fur seal, Grey seal, Elk, Human, Jaguar, Lion, Mink, Mole, Moose, Pig, Raccoon, Red bat, Sea lion, Skunk, Wolf\n”,<br>      “{‘carnivore’: 13, ‘omnivore’: 5, ‘herbivore’: 3}\n”,<br>      “\n”,<br>      “Kangaroo\n”,<br>      “{‘herbivore’: 1}\n”<br>     ]<br>    }<br>   ],<br>   “source”: [<br>    “ex = readExamples(‘dental.txt’)\n”,<br>    “scaleFeatures(ex)\n”,<br>    “testClustering(ex, 3, 20)”<br>   ]<br>  },<br>  {<br>   “cell_type”: “markdown”,<br>   “metadata”: {},<br>   “source”: [<br>    “To demonstrate that scaling normalizes values to mean 0 and std dev 1:”<br>   ]<br>  },<br>  {<br>   “cell_type”: “code”,<br>   “execution_count”: 30,<br>   “metadata”: {<br>    “collapsed”: false<br>   },<br>   “outputs”: [<br>    {<br>     “name”: “stdout”,<br>     “output_type”: “stream”,<br>     “text”: [<br>      “v1 mean = 99.9635 v1 std dev 4.987\n”,<br>      “v2 mean = 50.0847 v2 std dev 10.1106\n”,<br>      “v1 mean = -0.0 v1 std dev 1.0\n”,<br>      “v2 mean = -0.0 v2 std dev 1.0\n”<br>     ]<br>    }<br>   ],<br>   “source”: [<br>    “v1 = [random.gauss(100, 5) for i in range(1000)]\n”,<br>    “v2 = [random.gauss(50, 10) for i in range(1000)]\n”,<br>    “print(‘v1 mean =’, round(sum(v1)/len(v1), 4), ‘v1 std dev’, round(stdDev(v1), 4))\n”,<br>    “print(‘v2 mean =’, round(sum(v2)/len(v2), 4), ‘v2 std dev’, round(stdDev(v2), 4))\n”,<br>    “v1 = scale(v1); v2 = scale(v2)\n”,<br>    “print(‘v1 mean =’, round(sum(v1)/len(v1), 4), ‘v1 std dev’, round(stdDev(v1), 4))\n”,<br>    “print(‘v2 mean =’, round(sum(v2)/len(v2), 4), ‘v2 std dev’, round(stdDev(v2), 4))”<br>   ]<br>  },<br>  { </p>
<p>   “cell_type”: “code”,<br>   “execution_count”: null,<br>   “metadata”: {<br>    “collapsed”: true<br>   },<br>   “outputs”: [],<br>   “source”: []<br>  }<br> ],<br> “metadata”: {<br>  “kernelspec”: {<br>   “display_name”: “Python 3”,<br>   “language”: “python”,<br>   “name”: “python3”<br>  },<br>  “language_info”: {<br>   “codemirror_mode”: {<br>    “name”: “ipython”,<br>    “version”: 3<br>   },<br>   “file_extension”: “.py”,<br>   “mimetype”: “text/x-python”,<br>   “name”: “python”,<br>   “nbconvert_exporter”: “python”,<br>   “pygments_lexer”: “ipython3”,<br>   “version”: “3.6.0”<br>  }<br> },<br> “nbformat”: 4,<br> “nbformat_minor”: 2<br>} </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;·-以下例子来源于：MIT&quot;&gt;&lt;a href=&quot;#·-以下例子来源于：MIT&quot; class=&quot;headerlink&quot; title=&quot;· 以下例子来源于：MIT&quot;&gt;&lt;/a&gt;· 以下例子来源于：MIT&lt;/h3&gt;&lt;p&gt;{&lt;br&gt; “cells”: [&lt;br&gt;  {&lt;br&gt;   “cell_type”: “markdown”,&lt;br&gt;   “metadata”: {},&lt;br&gt;   “source”: [&lt;br&gt;    “#### Examples from Chapter 15: Machine Learning”&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://yoursite.com/categories/CS/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>如何高效搭建自己的博客</title>
    <link href="http://yoursite.com/2017/06/24/Steps-to-Build-Your-Own-Blog/"/>
    <id>http://yoursite.com/2017/06/24/Steps-to-Build-Your-Own-Blog/</id>
    <published>2017-06-24T14:33:28.000Z</published>
    <updated>2017-07-02T15:55:54.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-下载所需语言软件："><a href="#A-下载所需语言软件：" class="headerlink" title="A.下载所需语言软件："></a>A.下载所需语言软件：</h2><pre><code>1. Git. https://git-scm.com/
2. Cmder. http://cmder.net/
3. Node.js https://nodejs.org/zh-cn/
4. Sublime Text 3. https://www.sublimetext.com/3
5. Markdown Pad 2. http://markdownpad.com/
6. 如果某些网站需要翻墙才能进入，请下载GreenVPN，官方网站：http://www.greenjsq.me 
</code></pre><a id="more"></a>
<h2 id="B-登陆GitHub网页进行注册和建库"><a href="#B-登陆GitHub网页进行注册和建库" class="headerlink" title="B.登陆GitHub网页进行注册和建库"></a>B.登陆GitHub网页进行注册和建库</h2><pre><code>1. 通过邮箱注册账户名(username)，谨慎填写用户名
2. 登陆你的账号后，点击头像，选择your profile
3. 点击Repositories, 然后右上角选择Create a new Repositiories，然后填写自己的博客域名，格式一般为：yourname.github.io (yourname必须和注册用户名一致）
4. 注册和建库结束
</code></pre><h2 id="C-建立Blog所需环境-注意程序命令之间的x空格）"><a href="#C-建立Blog所需环境-注意程序命令之间的x空格）" class="headerlink" title="C. 建立Blog所需环境(注意程序命令之间的x空格）"></a>C. 建立Blog所需环境(注意程序命令之间的x空格）</h2><pre><code>1. 通过菜单栏找到Git Bash并打开，然后输入以下指令：

       git config --global user.name &quot;过程B注册的Github用户名&quot;
       git config --global user.email &quot;注册使用的邮箱地址&quot;

      *例子：
       git config --global user.name &quot;fushengrui&quot;
       git config --global user.email &quot;fus1@mcmaster.ca&quot;


2. 在电脑桌面(建议)或者任意系统盘建立一个文件并命名为： Blog 所需环境



3.  打开Cmder 按顺序输入以下指令：

              cd Desktop\blog所需环境
              npm install -g hexo-cli
              hexo init
              hexo g
              hexo server -p 4008
     (Important to Know: 首先，cd 后跟上一步骤建立文件夹的位置，为了方便，建议把文件建立在桌面就可以直接复制粘贴该命令; 其次,  -p 后的数字为任意四位数字）


4. 当hexo server -p 4008运行成功，命令框会提示进入“localhost: 4008&quot;进行网页博客预览。如果失败，重新输入该指令并替换“4008”为其他任意四位数字
</code></pre><h2 id="D-建立SSH密匙"><a href="#D-建立SSH密匙" class="headerlink" title="D. 建立SSH密匙"></a>D. 建立SSH密匙</h2><pre><code>1. 打开Git Bash输入以下指令：

     ssh-key gen -t rsa -C &quot;GitHub注册使用的邮箱”

2. 一般情况下，输入完该指令后，命令框会提示你为这个密匙文件夹进行命名，直接输入任意文件名即可；
3. 根据命令框提示密匙所在位置找到该文件；
4. 用Sumblime Text打开该文件，并复制文件中的内容；
5. 打开“github.com/settings/keys&quot;网站，登陆你的GitHub账号，选择增加新的SSH Key；
6. 然后粘贴已复制的内容，并提交。
</code></pre><h2 id="E-配置博客"><a href="#E-配置博客" class="headerlink" title="E.配置博客"></a>E.配置博客</h2><pre><code>1. 在你文件夹“blog所需环境”中找到另一个名为“blog”的文件夹；
2. 进入blog文件夹找到名为“_config.yml&quot;的文件；
3. 用Sublime 打开该文件夹找到如下内容并编辑：


 deploy: 
     type: git
     repo: https://github.com/Github用户名/用户名.github.io.git
     branch: master

    (Important：如果没有repo或者branch这一栏直接打字输入就好。铭记：deploy:, type:, repo:, branch: 后必须要先打一个空格在进行输入)


4. 找到并继续修改其它重要信息（记得每个冒号后加空格）

    title: 输入和修改博客网页显示的博客名
    subtitle: 副标题
    description: 网站描述
    author：作者名
    language：zh-Hans
    timezone: Asia/Shanghai


5. 保存，退出
</code></pre><h2 id="F-正式域名生产和后续更新博客内容所需步骤"><a href="#F-正式域名生产和后续更新博客内容所需步骤" class="headerlink" title="F.正式域名生产和后续更新博客内容所需步骤"></a>F.正式域名生产和后续更新博客内容所需步骤</h2><pre><code>1. 打开 Git CMD
2. 按顺序输入以下指令：

       npm install hexo-deployer-git --save
       hexo clean
       hexo g
       hexo s -p 4008

3. 先打开localhost: 4008网页进行预览，如果效果符合你的预期,键盘按 “Ctrl+C&quot;
4. 在命令框输入以下指令：

       n
       hexo d 

5. 这个时候会弹出一个窗口登陆你的GitHub账户和用户名，域名生成。以后就可以直接在网页输入“xxx.github.io”登陆你的博客啦
</code></pre><h2 id="G-如何调整博客背景页面的主题？"><a href="#G-如何调整博客背景页面的主题？" class="headerlink" title="G.如何调整博客背景页面的主题？"></a>G.如何调整博客背景页面的主题？</h2><pre><code>1. 打开网页&quot;http://hexo.io/themes/”并点击选择你喜欢的背景主题

2. 点击后会弹出另一个网页窗口，然后点击绿色按钮“clone or download&quot;，然后点击“download ZIP”

   3. 点开该压缩文件并解压文件到之前建立的“blog所需环境”=&gt;&quot;blog” =&gt; &quot;themes&quot;

   4. 再次打开文件夹&quot;blog&quot; 的“_config.yml&quot;找到“theme”栏

   5. 在theme栏后编辑你刚下载的“主题的名字”即“下载的文件夹名”，然后保存，记得冒号后加空格；

6. 执行步骤F(跳过过程1直接从2开始)，更新博客即可。
</code></pre><p><div id="hypercomments_widget"></div></p>
<p><script type="text/javascript"><br>_hcwp = window._hcwp || [];<br>_hcwp.push({widget:”Stream”, widget_id: 92589});<br>(function() {<br>if(“HC_LOAD_INIT” in window)return;<br>HC_LOAD_INIT = true;<br>var lang = (navigator.language || navigator.systemLanguage || navigator.userLanguage || “en”).substr(0, 2).toLowerCase();<br>var hcc = document.createElement(“script”); hcc.type = “text/javascript”; hcc.async = true;<br>hcc.src = (“https:” == document.location.protocol ? “https” : “http”)+”://w.hypercomments.com/widget/hc/92589/“+lang+”/widget.js”;<br>var s = document.getElementsByTagName(“script”)[0];<br>s.parentNode.insertBefore(hcc, s.nextSibling);<br>})();<br></script><br><a href="http://hypercomments.com" class="hc-link" title="comments widget" target="_blank" rel="external">comments powered by HyperComments</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;A-下载所需语言软件：&quot;&gt;&lt;a href=&quot;#A-下载所需语言软件：&quot; class=&quot;headerlink&quot; title=&quot;A.下载所需语言软件：&quot;&gt;&lt;/a&gt;A.下载所需语言软件：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. Git. https://git-scm.com/
2. Cmder. http://cmder.net/
3. Node.js https://nodejs.org/zh-cn/
4. Sublime Text 3. https://www.sublimetext.com/3
5. Markdown Pad 2. http://markdownpad.com/
6. 如果某些网站需要翻墙才能进入，请下载GreenVPN，官方网站：http://www.greenjsq.me 
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
      <category term="Blog搭建" scheme="http://yoursite.com/tags/Blog%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
